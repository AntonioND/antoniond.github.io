<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SkyLyrac</title><link href="http://www.skylyrac.net/" rel="alternate"></link><link href="http://www.skylyrac.net/feeds/all.atom.xml" rel="self"></link><id>http://www.skylyrac.net/</id><updated>2023-10-16T02:35:00+01:00</updated><entry><title>Dual screen 3D on the NDS</title><link href="http://www.skylyrac.net/2023-10-12-dual-screen-3d-on-nds.html" rel="alternate"></link><published>2023-10-12T21:36:00+01:00</published><updated>2023-10-16T02:35:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2023-10-12:/2023-10-12-dual-screen-3d-on-nds.html</id><summary type="html">&lt;p&gt;The Nintendo DS has a GPU with a 3D engine that supports a surprising amount of
features. Normally it can only be used to display 3D graphics on one screen, but
it is possible to display 3D on both screens by using a special video capture
circuit.&lt;/p&gt;
&lt;p&gt;This technique isn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Nintendo DS has a GPU with a 3D engine that supports a surprising amount of
features. Normally it can only be used to display 3D graphics on one screen, but
it is possible to display 3D on both screens by using a special video capture
circuit.&lt;/p&gt;
&lt;p&gt;This technique isn't straightforward. The video hardware of the NDS is very
flexible, and there are several ways to achieve 3D graphics on both screens.&lt;/p&gt;
&lt;p&gt;Over the last few weeks I've been working on improving the dual screen 3D
support of &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine"&gt;Nitro Engine&lt;/a&gt;. It has
never been particularly reliable (when the framerate drops, the same output is
shown in both screens), and it is important that it is reliable because games
that use dual 3D are also likely to push the 3D hardware to the limit, and to
have framerate drops every now and then.&lt;/p&gt;
&lt;p&gt;This post is a very detailed explanation of how I've implemented things in Nitro
Engine. I've explained the reasons why each mode may be used, as well as their
limitations.&lt;/p&gt;
&lt;p&gt;If this post is too long for you to read, just use &lt;tt class="docutils literal"&gt;NE_InitDual3D_DMA()&lt;/tt&gt; in
your games and skip the read! However, feel free to keep reading if you care
about the details about how all of it is implemented.&lt;/p&gt;
&lt;p&gt;Something that applies to all the systems is that the 3D engine can only send
the output to one of the two screens during a specific frame. Any dual 3D setup
implies saving that 3D engine output to VRAM and displaying it on the other
screen during the following frame. Essentially, the main graphics engine and sub
graphics engine need to switch from one screen to the other after every frame.&lt;/p&gt;
&lt;p&gt;A huge thanks to mtheal and JustBurn for the &lt;a class="reference external" href="https://mtheall.com/banks.html"&gt;NDS Homebrew VRAM Banks Selector&lt;/a&gt; and the &lt;a class="reference external" href="https://mtheall.com/vram.html"&gt;NDS Homebrew VRAM BG Allocation
Conflict Viewer&lt;/a&gt;, tools that made my life a lot
easier when working on this. Check them out, and their source code on &lt;a class="reference external" href="https://github.com/mtheall/vram"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="memory-usage"&gt;
&lt;h2&gt;1. Memory usage&lt;/h2&gt;
&lt;p&gt;First of all, it is important to mention that dual 3D comes at a big cost. It is
impossible to have dual 3D without using two of the main VRAM banks (A, B, C and
D) as framebuffers. This means that half of the memory that the developer can
allocate for textures won't be available at all. There are two main things to
consider:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compressed textures: They are the most efficient way to have textures in VRAM,
and they need to be stored in a combination of VRAM A and B or VRAM B and C.
All the dual 3D modes of Nitro Engine leave VRAM banks A and B available for
textures, so compressed textures can be used.&lt;/li&gt;
&lt;li&gt;Clear bitmap: It is possible to store a bitmap with its own depth map (sort of
a Z-buffer for the bitmap) in VRAM banks C and D. While this is an interesting
feature, it isn't used nearly enough to worry about it, as it is a very
inefficient way to use VRAM (it requires 50% of the texture VRAM). In dual 3D
mode the developer can only use only 50% of the total memory available for
textures, so clear bitmaps aren't useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a comparative table of all modes supported by Nitro Engine and how the
different VRAM banks are used. Each mode will be explained in each own section:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Single screen 3D&lt;/th&gt;
&lt;th class="head"&gt;Dual screen 3D&lt;/th&gt;
&lt;th class="head"&gt;Dual 3D FB&lt;/th&gt;
&lt;th class="head"&gt;Dual 3D DMA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;VRAM A&lt;/td&gt;
&lt;td rowspan="4"&gt;3D textures [1]&lt;/td&gt;
&lt;td rowspan="2"&gt;3D textures&lt;/td&gt;
&lt;td rowspan="2"&gt;3D textures&lt;/td&gt;
&lt;td rowspan="2"&gt;3D textures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM C&lt;/td&gt;
&lt;td&gt;Framebuffer 1&lt;/td&gt;
&lt;td&gt;Framebuffer 1&lt;/td&gt;
&lt;td&gt;Framebuffer 1 +
Debug console [3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM D&lt;/td&gt;
&lt;td&gt;Framebuffer 2&lt;/td&gt;
&lt;td&gt;Framebuffer 2&lt;/td&gt;
&lt;td&gt;Framebuffer 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM E&lt;/td&gt;
&lt;td&gt;3D palettes&lt;/td&gt;
&lt;td&gt;3D palettes&lt;/td&gt;
&lt;td&gt;3D palettes&lt;/td&gt;
&lt;td&gt;3D palettes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM F&lt;/td&gt;
&lt;td&gt;Debug console&lt;/td&gt;
&lt;td&gt;Debug console&lt;/td&gt;
&lt;td&gt;[2]&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM G&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM H&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VRAM I&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Pseudo FB +
Debug console [3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note [1]: It is possible to tell Nitro Engine to not use specific VRAM banks out
of A, B, C and D. This is useful when using Nitro Engine at the same time as
some other library like NFlib. It is also possible to tell Nitro Engine to not
use VRAM banks A or B in dual 3D mode, but this isn't normally useful.&lt;/p&gt;
&lt;p&gt;Note [2]: The debug console isn't supported in this mode.&lt;/p&gt;
&lt;p&gt;Note [3]: The debug console is replicated in both VRAM I and the space of VRAM C
that isn't used by the video capture. This also means that enabling the debug
console doesn't require any additional memory banks, unlike in other modes
(however, it uses a bit of CPU). More details below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-capture-unit"&gt;
&lt;h2&gt;2. The capture unit&lt;/h2&gt;
&lt;p&gt;The capture unit allows you to capture the output of the main graphics engine.
It is possible to capture the 3D output by itself before any layering effect,
or the combined 2D+3D output. This last mode is useful if you want to display a
2D background on top of the 3D output, and then display that on the other
screen. In Nitro Engine this is used to display the debug console on top of the
3D output.&lt;/p&gt;
&lt;p&gt;It is a very flexible unit. It lets you select the size of the capture, the VRAM
bank used as destination (A, B, C or D), and even an offset for the destination
bank (for example, if you want to start saving the captured output after the
first fourth of the bank). Check &lt;a class="reference external" href="https://problemkaputt.de/gbatek.htm#dsvideodisplaysystemblockdiagram"&gt;GBATEK&lt;/a&gt; for
more information.&lt;/p&gt;
&lt;p&gt;The only problem with this unit is that the destination bank must be mapped to
the CPU (LCD mode if you are using libnds). This restricts a lot what you can
do. There is a mode that lets you use the contents in VRAM as a framebuffer even
when it is mapped to the CPU, but it doesn't let you layer anything on top of
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="single-screen-3d-mode"&gt;
&lt;h2&gt;3. Single screen 3D mode&lt;/h2&gt;
&lt;p&gt;Before talking about dual 3D, let's start with single screen 3D, which is easier
to explain. VRAM banks are used like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM A, B, C, D: Textures.&lt;/li&gt;
&lt;li&gt;VRAM E: Texture palettes.&lt;/li&gt;
&lt;li&gt;VRAM F: Debug console (if it is enabled).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output in the main screen is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Layer 0: 3D output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the debug console is enabled, it changes a bit. The priorities of layers 0
and 1 are swapped so that the debug console appears on top of the 3D output.
VRAM F is setup as main engine background memory, and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Layer 0: 3D output, priority 1.&lt;/li&gt;
&lt;li&gt;Layer 1: Debug console, priority 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dual-screen-3d-mode"&gt;
&lt;h2&gt;4. Dual screen 3D mode&lt;/h2&gt;
&lt;p&gt;The source code &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/blob/8c323c7e2c29bf0b52951ac2756139026f09f269/source/NEGeneral.c#L608"&gt;for regular dual 3D mode is here&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/blob/8c323c7e2c29bf0b52951ac2756139026f09f269/source/NEGeneral.c#L493"&gt;the source code for the console initialization is here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the traditional way to handle dual 3D, and it is used in multiple
examples that can be found &lt;a class="reference external" href="https://github.com/devkitPro/nds-examples/blob/6afa09b2054c9f47685514c32873b3905721c9ee/Graphics/3D/3D_Both_Screens/source/template.c"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VRAM banks are used like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM A, B: Textures.&lt;/li&gt;
&lt;li&gt;VRAM C, D: Framebuffers.&lt;/li&gt;
&lt;li&gt;VRAM E: Texture palettes.&lt;/li&gt;
&lt;li&gt;VRAM F: Debug console of main screen (if it is enabled).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Odd frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped as sub engine background. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped to the CPU.&lt;/li&gt;
&lt;li&gt;VRAM F is mapped as main engine background. It holds the debug console.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output of the main screen is the combined output of the 3D engine and the
main 2D engine, which displays the debug console.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the background stored in VRAM C.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the same output as the main screen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped to the CPU.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped as sub engine sprites. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM F isn't used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output of the main screen is the combined output of the 3D engine and the
main 2D engine, which isn't showing anything right now.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the background stored in VRAM D. However, it
isn't possible to use VRAM D as sub engine background memory, so a grid of 64x64
sprites is setup so that they display the contents of VRAM D as a 256x192 image.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the same output as the main screen.&lt;/p&gt;
&lt;img alt="Dual 3D diagram" class="align-center" src="./images/ne_dual_3d.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The latency of the 3D rendered image is zero. It is directly displayed on the
screen without any delay.&lt;/li&gt;
&lt;li&gt;The screen effects based on changing the horizontal scroll every scanline
work.&lt;/li&gt;
&lt;li&gt;The debug console is supported.&lt;/li&gt;
&lt;li&gt;No CPU or DMA processing is needed.&lt;/li&gt;
&lt;li&gt;All 256x192 pixels of the screens are used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;If the framerate ever drops below 60 FPS, the same 3D output will be displayed
on both screens until the next frame is rendered. It can happen when loading
assets at runtime, for example. This happens because only one frame is
actually displayed from a framebuffer. The other one depends on the actual
output of the 3D graphics engine.&lt;/p&gt;
&lt;p&gt;While screen A is displayed from a framebuffer, the framebuffer of screen B is
capturing the output of the new screen B. During the next frame, if screen A
can't be drawn, the framebuffer of screen B will be displayed from a
framebuffer while the 3D engine still displays the previous screen, which is
screen B.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The textures and palettes of the NDS use 15 bit colors, that is, they use 5
bits per component (R, G, B). However, the LCD screen of the NDS uses 6 bits
per component. Normally the least significant bit isn't used, but it can be
used if two poligons are blended together, for example.&lt;/p&gt;
&lt;p&gt;This is a problem because the video capture unit doesn't capture the 6 bits.
If the output switches between actual 3D output and captured 3D output the
user may notice that the image changes slightly between frames.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The debug console requires an additional VRAM bank, even if it's one of the
small ones.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I discourage you from using this mode. It's too easy to fall below 60 FPS and
hit the issue where both screens will show the same output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dual-screen-3d-fb-mode"&gt;
&lt;h2&gt;5. Dual screen 3D FB mode&lt;/h2&gt;
&lt;p&gt;The source code &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/blob/8c323c7e2c29bf0b52951ac2756139026f09f269/source/NEGeneral.c#L670"&gt;for dual 3D FB mode is here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is another well-known way to handle dual 3D, but it prevents you from using
the 2D engine in the screen that is being updated in that frame. This prevents
us from displaying a debug console in one screen because it would only be
displayed there half of the frames.&lt;/p&gt;
&lt;p&gt;It is named after the &lt;tt class="docutils literal"&gt;MODE_FB2&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;MODE_FB3&lt;/tt&gt; constants of &lt;a class="reference external" href="https://github.com/blocksds/libnds/blob/21ad6a51f5ffff00fa47e9a17f8547a46036933f/include/nds/arm9/video.h#L497-L500"&gt;libnds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VRAM banks are used like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM A, B: Textures.&lt;/li&gt;
&lt;li&gt;VRAM C, D: Framebuffers.&lt;/li&gt;
&lt;li&gt;VRAM E: Texture palettes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Odd frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped as sub engine background. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped to the CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main engine is setup in direct VRAM display mode, so the output of the main
screen is the contents of VRAM D.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the background stored in VRAM C.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the 3D output directly, and it saved it to VRAM
D, which can be accessed by the capture hardware because it's mapped to the CPU.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped to the CPU.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped as sub engine sprites. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main engine is setup in direct VRAM display mode, so the output of the main
screen is the contents of VRAM C.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the background stored in VRAM D. However, it
isn't possible to use VRAM D as sub engine background memory, so a grid of 64x64
sprites is setup so that they display the contents of VRAM D as a 256x192 image.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the 3D output directly, and it saved it to VRAM
C, which can be accessed by the capture hardware because it's mapped to the CPU.&lt;/p&gt;
&lt;img alt="Dual 3D diagram in FB mode" class="align-center" src="./images/ne_dual_3d_fb.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the framerate ever drops below 60 FPS, the output of both screens will be
stable, no matter how long the wait is until the next frame is rendered.&lt;/li&gt;
&lt;li&gt;No CPU or DMA processing is needed.&lt;/li&gt;
&lt;li&gt;All 256x192 pixels of the screens are used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The latency of the 3D rendered image is high. The capture unit saves the 3D
output to the same bank that is being used as framebuffer, but it is saved
at the same time the framebuffer is sent to the screen, which means the actual
output is frame stored in the framebuffer from the last time it was drawn, 2
frames ago.&lt;/li&gt;
&lt;li&gt;The screen effects based on changing the horizontal scroll every scanline
don't work.&lt;/li&gt;
&lt;li&gt;The debug test console can't be used. The main screen always uses the contents
of VRAM directly, it isn't possible to layer anything on top of it. The main
and sub screens switch every frame, so it wouldn't be possible to display a
stable console on any screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The high latency of this mode may make it unsuitable for fast-paced games.
Also, due to the lack of a usable debug text console, it may not be useful for
developers.&lt;/p&gt;
&lt;p&gt;If latency isn't an issue in your game, it is possible to use this mode for the
release version of the game, after you don't rely on the debug console for
anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dual-screen-3d-dma-mode"&gt;
&lt;h2&gt;6. Dual screen 3D DMA mode&lt;/h2&gt;
&lt;p&gt;The source code &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/blob/8c323c7e2c29bf0b52951ac2756139026f09f269/source/NEGeneral.c#L735"&gt;for this mode is here&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/blob/8c323c7e2c29bf0b52951ac2756139026f09f269/source/NEGeneral.c#L518"&gt;this is the code to initialize the debug console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://github.com/Gericom"&gt;Gericom&lt;/a&gt; for all the advice regarding
this system!&lt;/p&gt;
&lt;p&gt;This system is the most complex one, by far. It combines the ability of having
stable output with low framerates, the ability of showing special effects, and
the ability to have a debug console. However, this has a cost in CPU time.&lt;/p&gt;
&lt;p&gt;It is always required to use 2 VRAM banks to hold the two framebuffers of the
screens. This mode is similar to the previous one, but it takes the current VRAM
bank used as destination of the video capture unit, and it copies it to a pseudo
framebuffer in VRAM I with DMA. By copying every line right after it has been
drawn it is possible to use VRAM I as a 16 bit bitmap.&lt;/p&gt;
&lt;p&gt;The main problem is that VRAM I isn't big enough to hold a full 256x192. The
workaround is to either write out of bounds and rely on the mirroring of
addresses of VRAM I, or to only copy to the first line of VRAM I, and to stretch
it to fill the whole screen. Nitro Engine uses this last system so that the rest
of VRAM I can be used for other things.&lt;/p&gt;
&lt;p&gt;VRAM banks are used like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM A, B: Textures.&lt;/li&gt;
&lt;li&gt;VRAM C: Framebuffer of main screen and debug console of main screen.&lt;/li&gt;
&lt;li&gt;VRAM D: Framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM E: Texture palettes.&lt;/li&gt;
&lt;li&gt;VRAM I: Pseudo framebuffer and debug console of sub screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, there are two copies of the console. This is done to save VRAM.
In short, there is a lot of unused memory in VRAM C, D and I with this setup.
In odd frames the console is displayed on the sub screen from VRAM I; in even
frames it is displayed in the main screen from VRAM C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Odd frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped to the CPU.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped as main engine background. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM I is mapped as sub engine background. It holds one line of a 16 bit
framebuffer, as well as the debug console.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output of the main screen is the framebuffer stored in VRAM D.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the pseudo framebuffer stored in VRAM I, with
the debug console on top of it.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the 3D output. This is stored in VRAM C. The
important thing is that the image is written to VRAM C at the same rate it would
be drawn on the screen. If the DMA is setup to copy from VRAM C to VRAM I right
after each line is written to VRAM C, it is possible to display the captured
image right away. The only problem with this is that there is a one scanline
delay in the copy, so the first line of the screen won't be able to show
anything useful. In Nitro Engine, the vertical blank interrupt handler sets it
to black so that it doesn't show different values every frame.&lt;/p&gt;
&lt;p&gt;Finally, that one line is stretched to fill the whole screen, and that's how by
simply copying the line every horizontal blanking period the screen can be
filled with different lines.&lt;/p&gt;
&lt;p&gt;This is different than in the dual 3D FB mode. In the FB mode it isn't possible
to have this delay, so the image displayed on the screen is the one rendered 2
frames ago. In DMA mode the image being displayed is the one rendered this
frame.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even frames:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VRAM C is mapped as main engine background. It holds a 16 bit framebuffer.&lt;/li&gt;
&lt;li&gt;VRAM D is mapped to the CPU.&lt;/li&gt;
&lt;li&gt;VRAM I is mapped as sub engine background. It holds one line of a 16 bit
framebuffer, as well as the debug console (but the debug console isn't used
right now).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output of the main screen is the framebuffer stored in VRAM C, with the
debug console stored in VRAM C on top of it.&lt;/p&gt;
&lt;p&gt;The output of the sub screen is the pseudo framebuffer stored in VRAM I.&lt;/p&gt;
&lt;p&gt;The capture unit takes as input the 3D output. The same notes about the DMA
apply as in odd frames.&lt;/p&gt;
&lt;img alt="Dual 3D diagram in DMA mode" class="align-center" src="./images/ne_dual_3d_dma.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that VRAM D doesn't require a copy of the console, only VRAM C and I. Also,
libnds only supports printing to one console at a time, so it is needed to load
the font to both VRAM C and I, setup the map there, and then synchronize both
maps manually. Which bank to use as main console bank? VRAM I, because it is
always mapped as sub background RAM. Nitro Engine copies the map from VRAM I to
VRAM C whenever VRAM C is mapped as main background RAM.&lt;/p&gt;
&lt;p&gt;VRAM C (128 KB) is arranged like this:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="46%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Memory range&lt;/th&gt;
&lt;th class="head"&gt;Size&lt;/th&gt;
&lt;th class="head"&gt;Used as&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0x06000000 - 0x06001000&lt;/td&gt;
&lt;td&gt;4 KB&lt;/td&gt;
&lt;td&gt;Tile base 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x06004000 - 0x06004800&lt;/td&gt;
&lt;td&gt;2 KB&lt;/td&gt;
&lt;td&gt;Map base 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x06008000 - 0x06020000&lt;/td&gt;
&lt;td&gt;96 KB&lt;/td&gt;
&lt;td&gt;BMP base 0 (256x192)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;VRAM viewer: &lt;a class="reference external" href="https://mtheall.com/vram.html#T1=3&amp;amp;NT1=128&amp;amp;MB1=8&amp;amp;TB1=0&amp;amp;T2=6&amp;amp;MB2=2&amp;amp;S2=1"&gt;https://mtheall.com/vram.html#T1=3&amp;amp;NT1=128&amp;amp;MB1=8&amp;amp;TB1=0&amp;amp;T2=6&amp;amp;MB2=2&amp;amp;S2=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reason to shift the framebuffer is that map bases over index 31 can't be
accessed normally. It requires setting DISPCNT map base 64 KB step to a non-zero
value, which would affect all backgrounds. By shifting the bitmap it is possible
to use low indices and not have to worry about DISPCNT.&lt;/p&gt;
&lt;p&gt;VRAM I (16 KB) is arranged like this:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="37%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="53%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Memory range&lt;/th&gt;
&lt;th class="head"&gt;Size&lt;/th&gt;
&lt;th class="head"&gt;Used as&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0x06208000 - 0x06209000&lt;/td&gt;
&lt;td&gt;4 KB&lt;/td&gt;
&lt;td&gt;Tile base 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x0620B000 - 0x0620B200&lt;/td&gt;
&lt;td&gt;512 B&lt;/td&gt;
&lt;td&gt;Framebuffer (one line, 256 pixels)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x0620B800 - 0x0620C000&lt;/td&gt;
&lt;td&gt;2 KB&lt;/td&gt;
&lt;td&gt;Map base 23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;VRAM viewer: &lt;a class="reference external" href="https://mtheall.com/vram.html#SUB=1&amp;amp;T1=3&amp;amp;NT1=128&amp;amp;MB1=23&amp;amp;TB1=2&amp;amp;T2=6&amp;amp;MB2=2&amp;amp;S2=0"&gt;https://mtheall.com/vram.html#SUB=1&amp;amp;T1=3&amp;amp;NT1=128&amp;amp;MB1=23&amp;amp;TB1=2&amp;amp;T2=6&amp;amp;MB2=2&amp;amp;S2=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yes, there is an overlap between the framebuffer and the tileset. The size of
each tileset slot is 16 KB, so there is only space for one tileset in VRAM I.
Unfortunately, there is also only one slot for bitmaps in VRAM I, as they are
organized in 16 KB slots. Both slots need to share the space.&lt;/p&gt;
&lt;p&gt;Luckily, the tileset of the console doesn't use the whole 16 KB. The current
console of libnds uses up to 256 characters, which requires (for a 4 bpp
tileset) 8 KB of VRAM. This means that anything in the second half of the bank
(VRAM I is 16 KB in size) can be used for maps or to store the pseudo
framebuffer line.&lt;/p&gt;
&lt;p&gt;8 KB is the same size as 16 lines in a 16-bit background. We can setup our
16-bit bitmap as if it started at the same base as the tileset, and we can store
our line bitmap at some point between 16 and 32 lines.&lt;/p&gt;
&lt;p&gt;Now, remember that the map uses the last 2 KB of the VRAM bank, and that uses as
much memory as 8 lines of a 16-bit bitmap. The free lines of the bitmap are
actually 16 to 24.&lt;/p&gt;
&lt;p&gt;Nitro Engine uses line 20, located at offset 0x3000 from the start of the bank.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the framerate ever drops below 60 FPS, the output of both screens will be
stable, no matter how long the wait is until the next frame is rendered.&lt;/li&gt;
&lt;li&gt;The latency of the 3D rendered image is zero. It is directly displayed on the
screen without any delay.&lt;/li&gt;
&lt;li&gt;The screen effects based on changing the horizontal scroll every scanline
work.&lt;/li&gt;
&lt;li&gt;The debug console is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some CPU and DMA processing is needed.&lt;/li&gt;
&lt;li&gt;Display lists can't be sent to the GPU using the DMA in GFX FIFO mode because
of the conflicts with the HBL DMA used to copy frames from VRAM C and D to
VRAM I. This adds a bit of overhead to the process (but not that much)&lt;/li&gt;
&lt;li&gt;The first row of the screens remains unused. Only 256x191 pixels are used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the mode I'd recommend everyone to use for your applications. The CPU
overhead is well worth the reliability under low framerates, the availability of
the debug console and the low latency of the 3D output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;7. Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, this is complicated.&lt;/p&gt;
&lt;p&gt;I've tried to give as much flexibility to the developers as possible, and this
is the result. It is certainly overwhelming for someone who has never done
anything similar. I've also tried to keep compatibility with the old unreliable
dual 3D system, just in case the new ones break some game created with old
versions of Nitro Engine.&lt;/p&gt;
&lt;p&gt;My advice is to use the DMA method and forget about the others. The classic dual
3D system is too unreliable, you can't expect to have a game that always draws
exactly 60 FPS. The FB method has a pretty big latency when displaying the 3D
output, so it is only useful for slow-paced games.&lt;/p&gt;
&lt;p&gt;I hope that this post has helped you understand how tricky this is, and how
flexible the NDS video hardware is!&lt;/p&gt;
&lt;/div&gt;
</content><category term="nintendo-ds"></category><category term="programming"></category><category term="nintendo-ds"></category><category term="nitro-engine"></category></entry><entry><title>BlocksDS SDK</title><link href="http://www.skylyrac.net/2023-08-18-blocksds-sdk.html" rel="alternate"></link><published>2023-08-18T17:44:00+01:00</published><updated>2023-09-06T10:14:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2023-08-18:/2023-08-18-blocksds-sdk.html</id><summary type="html">&lt;p&gt;A few months ago I created &lt;a class="reference external" href="https://github.com/blocksds/sdk"&gt;BlocksDS&lt;/a&gt;, a new SDK for Nintendo DS. It uses
libnds, DS WiFI and Maxmod, so it is compatible with projects that use
devkitARM. The toolchain it uses comes from &lt;a class="reference external" href="https://wonderful.asie.pl"&gt;Wonderful Toolchains&lt;/a&gt; by &lt;a class="reference external" href="https://asie.pl/"&gt;asie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its main objective is to remain as compatible as possible with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago I created &lt;a class="reference external" href="https://github.com/blocksds/sdk"&gt;BlocksDS&lt;/a&gt;, a new SDK for Nintendo DS. It uses
libnds, DS WiFI and Maxmod, so it is compatible with projects that use
devkitARM. The toolchain it uses comes from &lt;a class="reference external" href="https://wonderful.asie.pl"&gt;Wonderful Toolchains&lt;/a&gt; by &lt;a class="reference external" href="https://asie.pl/"&gt;asie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its main objective is to remain as compatible as possible with old projects that
use devkitARM, while adding new features that have been needed for a long time,
but that would have never been added to the original repositories of devkitPro.&lt;/p&gt;
&lt;p&gt;In order to achieve this, the libraries have been forked, and there are some
visible improvements over devkitARM already:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Binaries are smaller and they use less RAM. The main reasons for that are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Instead of using &lt;a class="reference external" href="https://sourceware.org/newlib"&gt;newlib&lt;/a&gt;, BlocksDS uses &lt;a class="reference external" href="https://github.com/picolibc/picolibc"&gt;picolibc&lt;/a&gt; (thanks to Wonderful
Toolchains). The &lt;tt class="docutils literal"&gt;tinystdio&lt;/tt&gt; of picolibc has smaller versions of &lt;tt class="docutils literal"&gt;stdio&lt;/tt&gt;
functions (like &lt;tt class="docutils literal"&gt;scanf()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;printf()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;fopen()&lt;/tt&gt;) than newlib.&lt;/li&gt;
&lt;li&gt;There have been some changes that optimize memory usage in libnds: &lt;a class="reference external" href="https://github.com/blocksds/libnds/pull/1"&gt;[1]&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/blocksds/libnds/pull/2"&gt;[2]&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/blocksds/libnds/pull/24"&gt;[3]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;BlocksDS doesn't have anything similar to &lt;tt class="docutils literal"&gt;devoptab&lt;/tt&gt;, which is used in
devkitARM. While this is very flexible, and very useful in platforms like
the Wii or Switch, it's too big for the GBA or NDS, where it doesn't offer
almost any benefit. There is more information about this change further down
this article.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The &lt;a class="reference external" href="https://github.com/blocksds/sdk/blob/c7e3f22054dc2b473089d064c3780f6c2fea1889/docs/licenses.rst"&gt;licensing status&lt;/a&gt; of all libraries has been clarified and documented.
This is important. Anything that doesn't have a license defaults to &amp;quot;all
rights reserved&amp;quot;, not &amp;quot;public domain&amp;quot;. Many things that devkitPro distributes
don't have a license. The examples don't have a license, but that's not the
worst thing, as it can be argued that most of them are trivial and copyright
doesn't apply to them. However, it is a problem for non-trivial code, and it
looks like the devkitPro maintainers seem to mistakenly believe that the lack
of a license is fine, and that it &lt;a class="reference external" href="https://github.com/devkitPro/wut/pull/148#issuecomment-652337319"&gt;leaves the code in the public domain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They also may be in violation of the &lt;a class="reference external" href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;GPLv3&lt;/a&gt; by distributing build scripts
for GPLv3-licensed software under incompatible &lt;a class="reference external" href="https://github.com/devkitPro/buildscripts/blob/f06196c43cca687108c6f73fe0b48ed01a606d85/build-devkit.sh#L17-L19"&gt;restrictive terms&lt;/a&gt;.
Any build scripts for GPLv3 software must also be released under the GPLv3:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;quot;Corresponding Source&amp;quot; for a work in object code form means all the
source code needed to generate, install, and (for an executable work) run
the object code and to modify the work, including scripts to control those
activities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The biggest practical problem for BlocksDS is that a library crucial for NDS
development doesn't have any license: &lt;a class="reference external" href="https://github.com/devkitPro/libfilesystem/issues/3"&gt;NitroFS&lt;/a&gt;. I tried to contact
the original author in every way I could think of with no luck. This means
that the library isn't open source, and it can't be used without permission
from the &lt;a class="reference external" href="http://blea.ch/wiki/index.php/Nitrofs"&gt;author&lt;/a&gt;. The devkitPro
maintainers aren't interested in fixing this situation.&lt;/p&gt;
&lt;p&gt;BlocksDS does thing in a different way. devkitARM uses &lt;a class="reference external" href="https://github.com/devkitPro/libfat"&gt;libfat&lt;/a&gt; by Chishm to
access FAT filesystems and interface with the DS hardware, and
&lt;a class="reference external" href="https://github.com/devkitPro/libfilesystem"&gt;libfilesystem&lt;/a&gt; to use the filesystem embedded in the NDS ROM (and it uses
the official filesystem format of the official SDK provided by Nintendo).&lt;/p&gt;
&lt;p&gt;BlocksDS uses &lt;a class="reference external" href="http://elm-chan.org/fsw/ff/00index_e.html"&gt;FatFs&lt;/a&gt; by Elm and a thin wrapper on top of libnds to access
libnds functions. Instead of using the official format of Nintendo, BlocksDS
uses what I've decided to call &lt;strong&gt;NitroFAT&lt;/strong&gt;, which appends a FAT filesystem
image to the NDS ROM, and it uses FatFs to access it. This allows BlocksDS to
reuse code, as accessing the filesystem of the SD card and the filesystem of
the ROM uses the same code. This is one of the reasons why NDS programs built
with BlocksDS are smaller than with devkitARM.&lt;/p&gt;
&lt;p&gt;This took a lot of effort to get working, and it is the best example I can
think of about why it is important to license your code so that people can
reuse it when you move on and stop caring about it.&lt;/p&gt;
&lt;p&gt;So, in order to ensure that this project can survive over time, all files in
all repositories of BlocksDS use &lt;a class="reference external" href="https://spdx.dev/"&gt;SPDX&lt;/a&gt; identifiers, so that the licensing
status of all individual files is always clear, which will allow other
projects to reuse the code of BlocksDS easily if they want. It also allows
other people to fork BlocksDS if something happens in the future.&lt;/p&gt;
&lt;p&gt;I also talked to the author to change the &lt;a class="reference external" href="https://github.com/blocksds/libnds/issues/30"&gt;license of GL2D&lt;/a&gt; to Zlib, like the
rest of &lt;tt class="docutils literal"&gt;libnds&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There is now basic multithreading support. &lt;tt class="docutils literal"&gt;libnds&lt;/tt&gt; wasn't thread-safe, so
it had to be modified so that multithreading works safely. Thread-local
storage support has also been added. You can define variables that are
unique per thread like this:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="n"&gt;__thread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;__thread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other_variable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;DLDI can now be used from both the ARM9 and ARM7.&lt;/p&gt;
&lt;p&gt;You can make the ARM9 ask the ARM7 to load files in one thread. While the ARM7
load files the ARM9 can be doing other things in other threads, so you aren't
blocked. This can also be done when loading files from the SD card of the DSi.
This has always been one of the limitations that annoyed me about creating
games with devkitARM, and now it's fixed.&lt;/p&gt;
&lt;p&gt;There is a big issue with DLDI drivers, and it's that some of them have been
compiled for the ARM9 and can't run on the ARM7. This is why, by default,
BlocksDS makes them run from the ARM9. The code must explicitly set ARM7 mode,
or the user needs to use a DLDI driver built with a &lt;a class="reference external" href="https://github.com/blocksds/sdk/tree/c7e3f22054dc2b473089d064c3780f6c2fea1889/tests/dldi_arm9_arm7"&gt;new configuration flag&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The DSi camera is supported (thanks, asie!). It's still quite basic, but
enough to be able to take photos from the front and back cameras.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;libnds&lt;/strong&gt; has been documented in many places, like the &lt;a class="reference external" href="https://github.com/blocksds/libnds/blob/9763b22fee597025777ec4c853c94d95944ffe37/source/arm9/system/mpu_setup.s"&gt;MPU setup&lt;/a&gt;, the
&lt;a class="reference external" href="https://github.com/blocksds/libnds/blob/9763b22fee597025777ec4c853c94d95944ffe37/source/common/fifo_ipc_messages.h"&gt;FIFO system&lt;/a&gt;, and the code that allows a program to &lt;a class="reference external" href="https://github.com/blocksds/sdk/blob/c7e3f22054dc2b473089d064c3780f6c2fea1889/docs/exit-to-loader.rst"&gt;return to the loader&lt;/a&gt;
if the loader supports it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;BlocksDS includes versions of &lt;tt class="docutils literal"&gt;memcpy()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;memset()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;memmove()&lt;/tt&gt;
optimmized for the CPUs of the NDS by using &lt;strong&gt;ndsabi&lt;/strong&gt;, a fork of &lt;a class="reference external" href="https://github.com/felixjones/agbabi"&gt;agbabi&lt;/a&gt;
by felixjones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;ndstool&lt;/strong&gt; now supports multiple languages in the banner, as well as icons in
formats like PNG or GIF (even animated GIFs!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;libxm7&lt;/strong&gt; has been added as an alternative to Maxmod.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;no$gba&lt;/strong&gt; debug messages are now supported in the ARM7, not only ARM9.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A few people have started to contribute with bugfixes, like &lt;a class="reference external" href="https://asie.pl/"&gt;asie&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/lifehackerhansol"&gt;lifehackerhansol&lt;/a&gt; and &lt;a class="reference external" href="https://pk11.us/"&gt;Pk11&lt;/a&gt;, which I'm very grateful about!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is guide that helps new users &lt;a class="reference external" href="https://github.com/blocksds/sdk/blob/c7e3f22054dc2b473089d064c3780f6c2fea1889/docs/porting-guide.rst"&gt;port devkitARM projects&lt;/a&gt; to BlocksDS. Even
though most code is compatible, there are a few things to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;BlocksDS is available on Windows and Linux. If you're using Mac, you can use
the &lt;a class="reference external" href="https://github.com/blocksds/sdk/tree/c7e3f22054dc2b473089d064c3780f6c2fea1889/docker"&gt;Docker images&lt;/a&gt; distributed by BlocksDS. There is no native way to use
BlocksDS on Mac, and currently there are no immediate plans to support it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The Makefiles are completely different from the ones used in devkitARM. For
most users this won't be a problem, the migration is very easy (it only
involves copying folder names from the old Makefiles to the new ones).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There is no &lt;tt class="docutils literal"&gt;devoptab&lt;/tt&gt; support. Most likely you've never heard of it or used
it directly, but &lt;tt class="docutils literal"&gt;devoptab&lt;/tt&gt; is the way that devkitARM uses to make things
like filesystem functions work (&lt;tt class="docutils literal"&gt;fopen()&lt;/tt&gt;, etc), or things like getting the
time and date from the OS (with &lt;tt class="docutils literal"&gt;time()&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;BlocksDS supports the same features without any intermediate layers (like
&lt;tt class="docutils literal"&gt;devoptab&lt;/tt&gt;) between libc functions and the hardware functions. This is one
of the reasons why binaries generated by BlocksDS are smaller and require less
RAM to run.&lt;/p&gt;
&lt;p&gt;However, in rare situations where user code uses &lt;tt class="docutils literal"&gt;devoptab&lt;/tt&gt;, it won't be
possible to migrate to BlocksDS without big changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a list of projects that now benefit from using BlocksDS:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/angband/angband/pull/5700"&gt;Angband&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/DS-Homebrew/dsbf_dump/releases/tag/v1.0"&gt;dsbf_dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/DS-Homebrew/GameYob"&gt;GameYob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/asiekierka/nitrotracker/releases/tag/0.4.3-unofficial"&gt;NitrousTracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/asiekierka/uxnds/releases/tag/v0.3.7"&gt;uxnds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/asiekierka/vnds/releases/tag/1.4.10-pre"&gt;VNDS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to the work of the maintainers of the projects it was possible to
exhaustively test BlocksDS, and it's now stable enough to be used by real
projects. A lot of work has been put into all of this by several people, so
it's great that some projects have started to use it for real!&lt;/p&gt;
&lt;p&gt;Finally, I'd like to mention NFlib and Nitro Engine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/knightfox75/nds_nflib"&gt;NFlib&lt;/a&gt; is a library that &lt;a class="reference external" href="https://github.com/knightfox75"&gt;NightFox&lt;/a&gt; created many years ago. It helps
developers create 2D games (and it has very basic 3D support). I've spent
quite a bit of time cleaning it up and documenting the library and examples
properly by adding Doxygen comments and translating everything from Spanish to
English (sorry, but it's too easy for the documentation to be outdated if it's
in multiple languages!).&lt;/p&gt;
&lt;p&gt;I also talked to the author to change the license to MIT instead of Creative
Commons. Note that Creative Commons is a license that &lt;a class="reference external" href="https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software"&gt;shouldn't be used for
code&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine"&gt;Nitro Engine&lt;/a&gt; is a library that I created many years ago as well. It's used
to develop 3D games. I've spent some time over the last few years cleaning it
up and improving it. In fact, I came up with the idea of BlocksDS when I was
frustrated because I couldn't implement a system to load assets from the
filesystem asynchronously with devkitARM.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both libraries are now fully supported in BlocksDS. The examples in both
repositories will build with BlocksDS, and Nitro Engine comes with an example of
how to use both libraries in the same project, which can be found &lt;a class="reference external" href="https://github.com/AntonioND/nitro-engine/tree/db33780b45da84dcdb7aeb7e763dcff995469f04/examples/templates/using_nflib"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the time of writing this post, the latest version of BlocksDS is &lt;a class="reference external" href="https://github.com/blocksds/sdk/releases/tag/v0.8.1"&gt;0.8.1&lt;/a&gt;. Give it a try! If you
find any problems, or you have questions, feel free to open issues in the
repository (or send a pull request with a fix!).&lt;/p&gt;
&lt;p&gt;P.S.: I haven't written anything in this blog for over 3 years... I still have a
few more updates to post in the coming days!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post has been updated on 2023-09-06 to reflect the fact that Windows is now
supported by Wonderful Toolchains, which enables BlocksDS to work on Windows
natively.&lt;/p&gt;
</content><category term="nintendo-ds"></category><category term="programming"></category><category term="nintendo-ds"></category><category term="blocksds"></category></entry><entry><title>Raspberry Pi LED ambient lamp</title><link href="http://www.skylyrac.net/2020-06-27-rpi-led-ambient-lamp.html" rel="alternate"></link><published>2020-06-27T13:27:00+01:00</published><updated>2020-06-27T13:27:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2020-06-27:/2020-06-27-rpi-led-ambient-lamp.html</id><summary type="html">&lt;p&gt;A few months ago (before the lockdown started) I was shopping at the Cambridge
city center, I popped by the &lt;a class="reference external" href="https://www.raspberrypi.org/raspberry-pi-store/"&gt;Raspberry Pi Store&lt;/a&gt; and I saw something called
&lt;a class="reference external" href="https://shop.pimoroni.com/products/mood-light-pi-zero-w-project-kit"&gt;Mood Light - Pi Zero W Project Kit&lt;/a&gt;. This is basically a kit that contains:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/"&gt;Raspberry Pi Zero W&lt;/a&gt;: Pretty nice, as it …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;A few months ago (before the lockdown started) I was shopping at the Cambridge
city center, I popped by the &lt;a class="reference external" href="https://www.raspberrypi.org/raspberry-pi-store/"&gt;Raspberry Pi Store&lt;/a&gt; and I saw something called
&lt;a class="reference external" href="https://shop.pimoroni.com/products/mood-light-pi-zero-w-project-kit"&gt;Mood Light - Pi Zero W Project Kit&lt;/a&gt;. This is basically a kit that contains:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/"&gt;Raspberry Pi Zero W&lt;/a&gt;: Pretty nice, as it has integrated WiFI.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pimoroni/unicorn-hat"&gt;Unicorn HAT&lt;/a&gt;: 32x4 RGB LED matrix with a pretty simple Python library to
control it.&lt;/li&gt;
&lt;li&gt;A plastic case to put everything in, for decoration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought it looked pretty nice, and decided to buy it to play with it during
when the lockdown started.&lt;/p&gt;
&lt;img alt="Photo of the lamp with Telegram bot and web interface" class="align-center" src="./images/led-lamp.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I wrote a &lt;a class="reference external" href="https://telegram.org/"&gt;Telegram&lt;/a&gt; bot a couple of years ago with &lt;a class="reference external" href="https://github.com/nickoala/telepot"&gt;Telepot&lt;/a&gt;, and I thought
that it would be a good idea to repurpose it to control the lamp remotely.
However, that was only supposed to be the first step. Nobody really wants to
have to type a command to change the color of the lights, right? Also, it looks
like that Telepot has been deprecated, so it's likely going to break at some
point in the future.&lt;/p&gt;
&lt;p&gt;The actual objective was to create a web user interface with &lt;a class="reference external" href="https://flask.palletsprojects.com/"&gt;Flask&lt;/a&gt;, expose it
to my home network, and to be able to control the lights pressing buttons in a
website from my phone, PC, and even let any guest that come to my home control
the lights by connecting to the WiFi network.&lt;/p&gt;
&lt;p&gt;This is a video of the result (it's missing one effect that simulates fire,
though):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=xjQCvFdkGJw"&gt;https://www.youtube.com/watch?v=xjQCvFdkGJw&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="how-does-it-work"&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;There are 3 main parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;LED server&lt;/strong&gt;: Script that has to be run with root permissions. It listens to
connections to a specific port and affects the LEDs. It can also reboot or
shutdown your Raspberry Pi.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Telegram bot&lt;/strong&gt;: Telegram bot that runs with regular user permissions. It can
send commands to the LED server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML server&lt;/strong&gt;: HTML server that sets up a website with some buttons that can
be used to control the LEDs. It sends commands to the LED server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you don't need the Telegram bot and HTML server at the same time. Just
one is enough. Also, any program that connects to the right port can send the
same commands to the LED server. Both the Telegram bot and the web interface can
control the lights at the same time.&lt;/p&gt;
&lt;p&gt;All you have to do is turn the Raspberry Pi on anywhere in the flat and it will
connect to the WiFi network, start the servers, and from that point you can talk
to the Telegram bot or use the web interface to control it!&lt;/p&gt;
&lt;p&gt;The only problem is that you have to turn it off manually from the web interface
before switching the power off, that's why both the web interface and the
Telegram bot support that command.&lt;/p&gt;
&lt;p&gt;For more information, check the code in my GitHub account:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/led-bot"&gt;https://github.com/AntonioND/led-bot&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="raspberry-pi"></category><category term="programming"></category><category term="raspberry-pi"></category></entry><entry><title>RGBDS - Rednex Game Boy Development System</title><link href="http://www.skylyrac.net/2018-02-05-rgbds.html" rel="alternate"></link><published>2018-02-05T23:42:00+00:00</published><updated>2018-02-05T23:42:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-02-05:/2018-02-05-rgbds.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;RGBDS&lt;/a&gt; is a toolchain to develop in assembly
for the Game Boy. It is used by many projects nowadays, and I'm not talking
about small ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disassemblies of games released during the lifetime of the GB:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokered"&gt;https://github.com/pret/pokered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokecrystal"&gt;https://github.com/pret/pokecrystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokepinball"&gt;https://github.com/pret …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;RGBDS&lt;/a&gt; is a toolchain to develop in assembly
for the Game Boy. It is used by many projects nowadays, and I'm not talking
about small ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disassemblies of games released during the lifetime of the GB:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokered"&gt;https://github.com/pret/pokered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokecrystal"&gt;https://github.com/pret/pokecrystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokepinball"&gt;https://github.com/pret/pokepinball&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Completely new projects:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ISSOtm/Aevilia-GB"&gt;https://github.com/ISSOtm/Aevilia-GB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Of course, it's the toolchain I use for my own projects:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/ucity"&gt;https://github.com/AntonioND/ucity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/back-to-color"&gt;https://github.com/AntonioND/back-to-color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/geometrix"&gt;https://github.com/AntonioND/geometrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only real alternative is &lt;a class="reference external" href="https://github.com/vhelin/wla-dx"&gt;WLA DX&lt;/a&gt;, as
far as I know. I personally don't like the syntax (because of small things like
using parentheses instead of square brackets for indirection) but it is probably
as powerful as RGBDS, and it's worth taking a look at it if you want to do
something serious for the GB.&lt;/p&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;It was released in 1997 as ASMotor by Carsten Sørensen as a general-purpose
assembler for DOS/Win32. In 1999, it was modified by Justin Lloyd and released
as RGBDS. In 2009, Vegard Nossum adapted the code for the toolchain to be more
UNIX-like and released it as rgbds-linux. In 2010, Anthony J. Bentley forked the
repository and improved on it, becoming the reference implementation of RGBDS.
Then, in February 2017, he asked me if I wanted to be its new maintainer, I
accepted, and he moved the repository to a neutral username. Basically, I was
one of the few people still proposing new changes and fixes, so it was a safe
choice.&lt;/p&gt;
&lt;p&gt;Nowadays, this project is located here: &lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;https://github.com/rednex/rgbds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is important to know that during all this time (20 years!) many people have
contributed to it, not only the main maintainers mentioned above. This had left
the codebase in a really complicated licensing situation. The original code was
released without a license, and pretty much every new contributor used a
variation of the BSD or MIT license for new changes.&lt;/p&gt;
&lt;p&gt;This is why I tried (and succeeded!) to get all the main authors to agree to
change the license so that all the codebase would have the same one. In the end,
all of the main contributors answered and gave permission to relicense their
code, and the MIT license was chosen: &lt;a class="reference external" href="https://github.com/rednex/rgbds/pull/225"&gt;https://github.com/rednex/rgbds/pull/225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In any case, because of its story, I don't think it makes sense to consider this
the project of a specific person in particular. At some point it just becomes a
project of the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;RGBDS is divided into &lt;strong&gt;rgbasm&lt;/strong&gt;, &lt;strong&gt;rgblink&lt;/strong&gt;, &lt;strong&gt;rgbfix&lt;/strong&gt; and &lt;strong&gt;rgbgfx&lt;/strong&gt;. In the
past, there was another tool called rgblib, but it was quite pointless as nobody
really used it, and the object format breaks quite often when adding new
features to the toolchain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbasm&lt;/strong&gt;: Assembler.&lt;/p&gt;
&lt;p&gt;It takes a file with source code as input and generates an object file as
output. It uses yacc/bison to parse files, which is a bit problematic because
of the source code syntax and how hard it is to resolve conflicts.&lt;/p&gt;
&lt;p&gt;It is really flexible. It has support for macros, unions, even for referencing
local labels through the parent label. Of course, the address of labels is not
always known at compile time, it is only known if the value is directly
assigned, or if the base address of the section is directly assigned. In order
to be able to resolve their address at linking time, or even be able to
calculate simple expressions with them (addition, bit masks...) there is a RPN
language that is used in object files to tell the linker how to operate with
them. Each value that has to be modified by the linker generates a patch of
RPN instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgblink&lt;/strong&gt;: Linker.&lt;/p&gt;
&lt;p&gt;It reads all object files generated by rgbasm (and potentially a linkerscript
with information about where to place sections) and generates a raw GB ROM,
that is not generally ready to directly use in a GB.&lt;/p&gt;
&lt;p&gt;In short, it places all sections in their final locations and calculates the
final value of all RPN patches. It can also generate files with a list of
labels and addresses to help debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbfix&lt;/strong&gt;: ROM fixer.&lt;/p&gt;
&lt;p&gt;Used to fix a finished GB ROM. There are some fields in the header that must
have the correct value for the game to boot in a real GB. Some of this fields
are difficult to fill at linking time, so it's easier to have an external tool
for it, that's where rgbfix comes in handy. It also pads a ROM if the size
isn't a power of two.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbgfx&lt;/strong&gt;: Graphics converter.&lt;/p&gt;
&lt;p&gt;This tool converts png files into the format that the GB uses. I must admit
that I've never used this tool, but it is used in disassemblies extensively.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I find it really interesting that this toolchain has managed to survive for such
a long time, and that it is still used so much. It's mostly used by
disassemblers, I must admit, but hey!&lt;/p&gt;
&lt;p&gt;As I've said before, this project wouldn't be nearly as useful if it wasn't
thanks to all of its contributors. Because of it, it is always open to
contributions. They don't have to be big or fancy, even small bug reports (or
bug fixes!) are welcome. So yeah, let's keep this project alive!&lt;/p&gt;
&lt;/div&gt;
</content><category term="gameboy"></category><category term="programming"></category><category term="gameboy"></category></entry><entry><title>Port of Trusted Firmware-A to the Raspberry Pi 3</title><link href="http://www.skylyrac.net/2018-02-01-port-arm-tf-to-rpi3.html" rel="alternate"></link><published>2018-02-01T23:54:00+00:00</published><updated>2018-07-14T20:15:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-02-01:/2018-02-01-port-arm-tf-to-rpi3.html</id><summary type="html">&lt;p&gt;This is a small project I worked on before Christmas. The &lt;a class="reference external" href="https://github.com/ARM-software/arm-trusted-firmware"&gt;Trusted Firmware-A&lt;/a&gt; is a reference
implementation of a secure firmware for ARMv8-A CPUs. It has ports to both
AArch64 (64-bit Arm Instruction Set Architecture) and AArch32 (32-bit Arm ISA).
AArch32 is almost the same as ARMv7-A, for backwards compatibility …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small project I worked on before Christmas. The &lt;a class="reference external" href="https://github.com/ARM-software/arm-trusted-firmware"&gt;Trusted Firmware-A&lt;/a&gt; is a reference
implementation of a secure firmware for ARMv8-A CPUs. It has ports to both
AArch64 (64-bit Arm Instruction Set Architecture) and AArch32 (32-bit Arm ISA).
AArch32 is almost the same as ARMv7-A, for backwards compatibility.&lt;/p&gt;
&lt;p&gt;The SoC of the Raspberry Pi 3 is the Broadcom BCM2937, which has 4 Cortex-A53
cores. The Cortex-A53 is a microarchitecture that implements the ARMv8-A ISA
with both 64 and 32-bit modes, so it is possible to port the Trusted Firmware-A.
At work I'm one of the engineers working on the Trusted Firmware-A, and I really
like the Raspberry Pi, so I simply couldn't resist, I needed to have the Trusted
Firmware running on it.&lt;/p&gt;
&lt;p&gt;Even though the Trusted Firmware has ports to both AArch64 and AArch32, the one
that interests me is AArch64. There is no real advantage for making the port for
Raspberry Pi run in AArch32 mode. The firmware runs in EL3, the highest
privilege execution level. The architecture allows to downgrade from 64 to
32-bit when reducing the privilege level, but not to increase it. That means
that, for example, if the firmware is running in 64-bit mode, it is possible to
have a 64 or a 32-bit hypervisor in EL2. Similarly, an operating system in
64-bit mode in EL1 can execute both 64 and 32-bit user applications in EL0. In
short, a 64-bit firmware allows any other privilege level to use 64 or 32-bit
mode, but a 32-bit firmware would restrict them to execute in 32-bit mode.&lt;/p&gt;
&lt;p&gt;Also, it is important that this port works with &lt;a class="reference external" href="https://www.raspberrypi.org/downloads/raspbian/"&gt;Raspbian&lt;/a&gt;. It is the Linux
distribution for the Raspberry Pi with the best support, as it has the support
of the Raspberry Pi Foundation itself. If a port of the Trusted Firmware is to
be done, it's a good idea to make it work with Raspbian.&lt;/p&gt;
&lt;p&gt;This port is based on the work of Ard Biesheuvel (&lt;a class="reference external" href="https://github.com/ardbiesheuvel"&gt;&amp;#64;ardbiesheuvel&lt;/a&gt;), explained &lt;a class="reference external" href="http://www.workofard.com/2017/02/uefi-on-the-pi/"&gt;in this article&lt;/a&gt;. The port is in &lt;a class="reference external" href="https://github.com/ardbiesheuvel/arm-trusted-firmware/tree/rpi3"&gt;this
repository&lt;/a&gt;.
The port has been heavily modified. For starters, that port didn't manage to
boot Linux or to release the secondary CPUs from their wait loop (the RAM used
as a mailbox wasn't initialized to 0 before entering the wait loop).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: Even though the Trusted Firmware-A is a reference of a
secure boot flow, the Raspberry Pi 3 doesn't isn't a secure platform. The memory
available to the CPUs is the DRAM, which can be accessed when the CPU is in
Non-secure and Secure modes. However, in order to emulate the normal bootflow,
the memory map is divided in a few regions.&lt;/p&gt;
&lt;p&gt;In short, this is a port that can be used to play around with, implement
standard services that the OS can use, etc. This is not meant to be used to
implement secure services in any way.&lt;/p&gt;
&lt;p&gt;It could be possible to emulate secure RAM by using the hypervisor translation
tables to hide some memory from the OS, which would act as SRAM. This is
non-trivial, and it is outside of the scope of this project.&lt;/p&gt;
&lt;div class="section" id="getting-the-trusted-firmware-a-to-boot"&gt;
&lt;h2&gt;Getting the Trusted Firmware-A to boot&lt;/h2&gt;
&lt;p&gt;First of all, I connected a UART to USB cable to the Mini UART located in the
pin header. I verified that the connection was working by using &lt;tt class="docutils literal"&gt;screen&lt;/tt&gt; to
connect to Linux through it. To enable this connection, the file &lt;tt class="docutils literal"&gt;config.txt&lt;/tt&gt;
on the root of the SD card must contain a line that says &lt;code&gt;enable_uart=1&lt;/code&gt;.
Also, I added &lt;code&gt;console=serial0,115200 console=tty1&lt;/code&gt; to the file
&lt;tt class="docutils literal"&gt;cmdline.txt&lt;/tt&gt;. Once I verified that it was working, I started to take a look
at the code of the port.&lt;/p&gt;
&lt;p&gt;The port was quite old by the time I started to work on this project, so the
first thing that I did was to rebase the branch, replace some old APIs and
libraries by the new ones, and made sure that it compiled. I also enabled some
CPU errata workarounds that can affect the Cortex-A53. Then, I had to figure out
how to make it run. I needed to get all CPU cores running the same binary at EL3
in AArch64 mode.&lt;/p&gt;
&lt;p&gt;The booting process of the Raspberry Pi is quite unusual. The SoC has a
VideoCore IV located between all the Arm cores and the DRAM. It has its own MMU
and tricks the Arm cores into thinking that the physical memory map is different
than it actually is! This VideCore is also the one that has a ROM bootloader
that loads the rest of the files from the SD card. The file &lt;tt class="docutils literal"&gt;config.txt&lt;/tt&gt; tells
it how to load them, but most of the options of interest to this project are
undocumented. After some googling I managed to find the ones I needed and got
all 4 cores booting in AArch64 mode in EL3. For more details about it, check the
documentation of the port in the official repository of the Trusted Firmware:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ARM-software/arm-trusted-firmware/blob/master/docs/plat/rpi3.rst"&gt;https://github.com/ARM-software/arm-trusted-firmware/blob/master/docs/plat/rpi3.rst&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In short, the kernel has to be renamed to &lt;tt class="docutils literal"&gt;kernel8.img&lt;/tt&gt; and the firmware has
to be packaged as one single binary and named &lt;tt class="docutils literal"&gt;armstub8.bin&lt;/tt&gt;. Then, in the
&lt;tt class="docutils literal"&gt;config.txt&lt;/tt&gt; file I added the following lines to tell the loader where to load
the files in DRAM.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="nv"&gt;enable_uart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;kernel_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0x01000000&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;device_tree_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0x02000000
&lt;/pre&gt;
&lt;p&gt;One good thing about this unusual bootflow is that it is literally impossible to
brick the Raspberry Pi, you just need to write the correct files to your SD card
and it will boot again. Also, it gives the user a lot of flexibility on how to
boot the Arm cores. Normally it's not that simple to select AArch64 or AArch32
at the highest Execution Level, that's fixed by the platform. In the Raspberry
Pi, that can be changed by changing a value in the configuration file.&lt;/p&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://github.com/swarren/rpi-3-aarch64-demo"&gt;demo by Stephen Warren&lt;/a&gt;
was useful to test that my code was running in the conditions I needed. That
demo shows the same message per each CPU with the values of some registers, like
&lt;tt class="docutils literal"&gt;CurrentEL&lt;/tt&gt;, that shows the EL in which the code is running.&lt;/p&gt;
&lt;p&gt;Once this was ready, I just needed to replace that demo by my binary of the
firmware and check if the port was working. I decided to use the binary of the
demo BL33 image, the final payload to be loaded by the firmware, where it jumps
after initializing everything. I got the following output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
VERBOSE: Reserved 0x12000 bytes (discarded 0x7000 bytes above)
VERBOSE: Trusted SRAM seen by this BL image: 181000 - 0x200000
VERBOSE: Code region: 0 - 0x5f90
ERROR:   mmap_add_region_check() failed. error -22
ASSERT:  lib/xlat_tables_v2/xlat_tables_internal.c:753:0
&lt;/pre&gt;
&lt;p&gt;Success! Sort of, anyway. That error is &lt;tt class="docutils literal"&gt;EINVAL&lt;/tt&gt;. It means that there is some
sort of overlap of memory regions, or that the platform is trying to map regions
with invalid values for some reason. I initially thought that it was just that
there wasn't enough memory reserved to setup the translation tables. Anyway,
easy enough to fix! I eventually got this output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NOTICE:  Booting Trusted Firmware
NOTICE:  BL1: v1.4(debug):v1.4-308-g2082b0ad
NOTICE:  BL1: Built : 02:47:22, Nov  4 2017
INFO:    BL1: RAM 0x3ee000 - 0x3f7000
INFO:    BL1: cortex_a53: errata workaround for 835769 was applied
INFO:    BL1: cortex_a53: errata workaround for 843419 was applied
INFO:    BL1: cortex_a53: errata workaround for 855873 was applied
INFO:    BL1: Loading BL2
INFO:    Loading image id=1 at address 0x3b4000
INFO:    Image id=1 loaded: 0x3b4000 - 0x3ba1f0
NOTICE:  BL1: Booting BL2
INFO:    Entry point address = 0x3b4000
INFO:    SPSR = 0x3c5
NOTICE:  BL2: v1.4(debug):v1.4-308-g2082b0ad
NOTICE:  BL2: Built : 02:47:22, Nov  4 2017
INFO:    BL2: Doing platform setup
INFO:    BL2: Loading image id 3
INFO:    Loading image id=3 at address 0x3e0000
INFO:    Image id=3 loaded: 0x3e0000 - 0x3e8080
INFO:    BL2: Loading image id 5
INFO:    Loading image id=5 at address 0x600000
INFO:    Image id=5 loaded: 0x600000 - 0x6003f4
NOTICE:  BL1: Booting BL31
INFO:    Entry point address = 0x3e0000
INFO:    SPSR = 0x3cd
NOTICE:  BL31: v1.4(debug):v1.4-308-g2082b0ad
NOTICE:  BL31: Built : 02:47:22, Nov  4 2017
INFO:    BL31: Initializing runtime services
INFO:    BL31: cortex_a53: errata workaround for 835769 was applied
INFO:    BL31: cortex_a53: errata workaround for 843419 was applied
INFO:    BL31: cortex_a53: errata workaround for 855873 was applied
INFO:    BL31: Preparing for EL3 exit to normal world
INFO:    Entry point address = 0x600000
INFO:    SPSR = 0x3c9

Hello, world!
this_cpuid:0
MPIDR:0000000080000000
r0:0000000000000000
r1:0000000000000000
r2:0000000000000000
r3:0000000000000000
CurrentEL:8
SPSel:1
&lt;/pre&gt;
&lt;p&gt;The exception level is encoded in bits 3 and 2 of register &lt;tt class="docutils literal"&gt;CurrentEL&lt;/tt&gt;, which
means that this code is running at EL2, as we want! As you can see, the demo
only prints the registers of one CPU. This is normal, as all secondary cores are
supposed to wait for the OS to power them ON (or, in this case, release them
from a wait loop).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-linux-to-boot"&gt;
&lt;h2&gt;Getting Linux to boot&lt;/h2&gt;
&lt;p&gt;The next step was to actually get the Linux kernel booting. The Linux kernel
image simply replaces the demo I was using as BL33 image.&lt;/p&gt;
&lt;p&gt;I didn't have a 64-bit kernel to test with, though, just a 32-bit one (the one
that comes with Raspbian). According to the Linux boot documentation for the Arm
32-bit kernel (located in &lt;tt class="docutils literal"&gt;Documentation/arm/Booting&lt;/tt&gt; in the Linux kernel
tree), it likes to start in Hypervisor mode. I just needed to tweak the final
step of the firmware (the jump to the BL33 entrypoint) so that it jumped to this
mode instead of EL2 in AArch64 mode.&lt;/p&gt;
&lt;p&gt;This is easy, it is only needed to modify the value of &lt;tt class="docutils literal"&gt;SPSR&lt;/tt&gt; at the time it
jumps to BL33. With the correct value, it jumps to the entrypoint in AArch32 in
hypervisor mode. I didn't want to close the door to a 64-bit kernel, so I just
created a build option, &lt;tt class="docutils literal"&gt;RPI3_BL33_IN_AARCH32&lt;/tt&gt;, that would let the developer
choose EL2 in AArch64 or Hypervisor in AArch32.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NOTICE:  Booting Trusted Firmware
NOTICE:  BL1: v1.4(debug):v1.4-310-gf49906c8-dirty
NOTICE:  BL1: Built : 23:55:50, Nov  4 2017
NOTICE:  BL1: Booting BL2
NOTICE:  BL2: v1.4(debug):v1.4-310-gf49906c8-dirty
NOTICE:  BL2: Built : 23:55:50, Nov  4 2017
NOTICE:  BL1: Booting BL31
NOTICE:  BL31: v1.4(debug):v1.4-310-gf49906c8-dirty
NOTICE:  BL31: Built : 23:55:50, Nov  4 2017
[    1.060413] CPU1: failed to come online
[    2.101140] CPU2: failed to come online
[    3.141884] CPU3: failed to come online
[    3.327640] bcm2835-aux-uart 3f215040.serial: could not get clk: -517

Raspbian GNU/Linux 9 raspberrypi ttyS0
raspberrypi login:
&lt;/pre&gt;
&lt;p&gt;The secondary cores couldn't come online because this kernel doesn't know about
PSCI, which is the standard way of powering on Arm cores. But that's not a
problem, there is a workaround, the kernel also has support for booting
secondary cores by making them wait in a wait loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-the-secondary-cores-to-work"&gt;
&lt;h2&gt;Getting the secondary cores to work&lt;/h2&gt;
&lt;p&gt;The port I used as a base already had an implementation of the SMC (System
Monitor Call) &lt;tt class="docutils literal"&gt;PSCI_CPU_ON&lt;/tt&gt; that made the secondary cores wait in a loop until
it was called, at which point it released them and jumped to the given address.&lt;/p&gt;
&lt;p&gt;Unfortunately, this can't work with the kernel if it doesn't know about PSCI,
and that was trickier that I expected. In the end, I decided to simply add some
glue code by creating a small bootstrap that would be used as BL33 image and run
in EL2. It would act like a really simple UEFI or U-Boot. The idea is to use
this bootstrap to release the locks from the firmware by calling &lt;tt class="docutils literal"&gt;PSCI_CPU_ON&lt;/tt&gt;
and make them wait in a wait loop that uses the mailbox that Raspbian knows how
to use to boot the secondary cores. I didn't really know how to do this, so I
just checked how it is done in the official distribution of Raspbian. The
following 2 links contain the bootstraps for a 32-bit kernel and a 64-bit kernel
respectively:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/raspberrypi/tools/blob/master/armstubs/armstub7.S"&gt;https://github.com/raspberrypi/tools/blob/master/armstubs/armstub7.S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/raspberrypi/tools/blob/master/armstubs/armstub8.S"&gt;https://github.com/raspberrypi/tools/blob/master/armstubs/armstub8.S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;armstub7.S&lt;/tt&gt; is used by the Raspberry Pi 2, which has 4 Cortex-A7, but also by
the Raspberry Pi 3 when booting a 32-bit kernel, and it has 4 Cortex-A53.
&lt;tt class="docutils literal"&gt;armstub8.S&lt;/tt&gt; is used by the Raspberry Pi 3 when booting a 64-bit kernel. The
compiled bootstraps are embedded on one of the elf files that are loaded by the
VideoCore at boot.&lt;/p&gt;
&lt;p&gt;After some reverse engineering I created my own versions of the bootstraps:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/rpi3-arm-tf-bootstrap"&gt;https://github.com/AntonioND/rpi3-arm-tf-bootstrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a side effect of my reverse engineering efforts, I checked the Technical
Reference Manuals of the Cortex-A53 and Cortex-A7 and found some really small
bugs in the official bootstrap for the 32-bit kernel. I created a pull request
to fix them:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/raspberrypi/tools/pull/85"&gt;https://github.com/raspberrypi/tools/pull/85&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However... After all that effort, the secondary cores still refused to work. I
decided to resort to printf-powered debugging and found out that the cores were
actually crashing before the kernel had had the chance to claim them. It took me
some time to understand the reason. Again, &lt;tt class="docutils literal"&gt;Documentation/arm/Booting&lt;/tt&gt; had the
answer: The kernel copies itself to a different memory region at boot:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
The zImage may also be placed in system RAM and called there.  The
kernel should be placed in the first 128MiB of RAM.  It is recommended
that it is loaded above 32MiB in order to avoid the need to relocate
prior to decompression, which will make the boot process slightly
faster.
&lt;/pre&gt;
&lt;p&gt;During this copy, the code of my waitloop was being overwritten. I checked that
moving the firmware to a location far away fixed the problem, but now I really
needed to find a way to protect he memory region used by the firmware. The whole
point of BL31 is to have some services that can be used by the operating system.
If Linux is free to use the memory used by the firmware, this can't work.&lt;/p&gt;
&lt;p&gt;I eventually found out the solution: To add &lt;code&gt;memmap=256M$16M&lt;/code&gt; to the file
&lt;tt class="docutils literal"&gt;cmdline.txt&lt;/tt&gt;. This option tells the kernel that at the address 256 MiB there
are 16 MiB that it shouldn't use, even if that range of memory contains valid
ram specified in the device tree that tells it about all the hardware in the
system.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NOTICE:  Booting Trusted Firmware
NOTICE:  BL1: v1.4(debug):v1.4-308-g65c55091-dirty
NOTICE:  BL1: Built : 20:33:44, Nov  5 2017
NOTICE:  BL1: Booting BL2
NOTICE:  BL2: v1.4(debug):v1.4-308-g65c55091-dirty
NOTICE:  BL2: Built : 20:33:44, Nov  5 2017
NOTICE:  BL1: Booting BL31
NOTICE:  BL31: v1.4(debug):v1.4-308-g65c55091-dirty
NOTICE:  BL31: Built : 20:33:44, Nov  5 2017
[    0.266483] bcm2835-aux-uart 3f215040.serial: could not get clk: -517

Raspbian GNU/Linux 9 raspberrypi ttyS0
raspberrypi login: pi
Password:
Last login: Sun Nov  5 20:41:18 GMT 2017 on tty1
Linux raspberrypi 4.9.41-v7+ #1023 SMP Tue Aug 8 16:00:15 BST 2017 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
pi&amp;#64;raspberrypi:~$ cat /proc/cpuinfo
processor       : 0
model name      : ARMv7 Processor rev 4 (v7l)
BogoMIPS        : 38.40
Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva
idivt vfpd32 lpae evtstrm crc32
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 1
model name      : ARMv7 Processor rev 4 (v7l)
BogoMIPS        : 38.40
Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva
idivt vfpd32 lpae evtstrm crc32
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 2
model name      : ARMv7 Processor rev 4 (v7l)
BogoMIPS        : 38.40
Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva
idivt vfpd32 lpae evtstrm crc32
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 3
model name      : ARMv7 Processor rev 4 (v7l)
BogoMIPS        : 38.40
Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva
idivt vfpd32 lpae evtstrm crc32
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

Hardware        : BCM2835
Revision        : a02082
Serial          : 000000001528876b
pi&amp;#64;raspberrypi:~$ sudo shutdown now
[   64.551587] reboot: Power down
&lt;/pre&gt;
&lt;p&gt;And a photo I took to commemorate the moment. :)&lt;/p&gt;
&lt;img alt="Photo of the console output" class="align-center" src="./images/arm-tf-32-bit-kernel-multicore.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At last, everything was working! Linux could detect all 4 cores! All I needed to
do now is to make sure that my port would also work with a 64-bit kernel, but...
well, I didn't have any 64-bit kernel and I didn't know where to get one from. I
ended up compiling my own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-a-64-bit-kernel-to-work"&gt;
&lt;h2&gt;Getting a 64-bit kernel to work&lt;/h2&gt;
&lt;p&gt;It is really simple, actually, you just have to clone the &lt;a class="reference external" href="https://github.com/raspberrypi/linux"&gt;Linux tree fork&lt;/a&gt; maintained by the Raspberry Pi
Foundation and compile it for 64-bit:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;--depth&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;rpi-4.14.y&lt;span class="w"&gt; &lt;/span&gt;https://github.com/raspberrypi/linux&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;linux&lt;span class="w"&gt;
&lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aarch64-linux-gnu-&lt;span class="w"&gt; &lt;/span&gt;bcmrpi3_defconfig&lt;span class="w"&gt;
&lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aarch64-linux-gnu-
&lt;/pre&gt;
&lt;p&gt;Then, copy the kernel image and the device tree to the SD card.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;arch/arm64/boot/Image&lt;span class="w"&gt; &lt;/span&gt;/path/to/boot/kernel8.img&lt;span class="w"&gt;
&lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;arch/arm64/boot/dts/broadcom/bcm2710-rpi-3-b.dtb&lt;span class="w"&gt; &lt;/span&gt;/path/to/boot/
&lt;/pre&gt;
&lt;p&gt;Finally, install the kernel modules.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aarch64-linux-gnu-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_MOD_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/filesystem&lt;span class="w"&gt; &lt;/span&gt;modules_install
&lt;/pre&gt;
&lt;p&gt;I also had to create a bootstrap in a similar way as I did for the 32-bit
kernel. It was easier now, though. All the booting information is in the file
&lt;tt class="docutils literal"&gt;Documentation/arm64/booting.txt&lt;/tt&gt;, like with the 32-bit kernel.&lt;/p&gt;
&lt;p&gt;After a bit of work, I finally got the kernel booting and releasing all
secondary cores from their loops! The console output for this kernel, however,
is really verbose, so I've cut significant parts of it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NOTICE:  Booting Trusted Firmware
NOTICE:  BL1: v1.4(debug):v1.4-331-gac96a37f
NOTICE:  BL1: Built : 22:59:37, Nov 13 2017
NOTICE:  BL1: Booting BL2
NOTICE:  BL2: v1.4(debug):v1.4-331-gac96a37f
NOTICE:  BL2: Built : 22:59:37, Nov 13 2017
NOTICE:  BL1: Booting BL31
NOTICE:  BL31: v1.4(debug):v1.4-331-gac96a37f
NOTICE:  BL31: Built : 22:59:37, Nov 13 2017
[    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.14.0-rc8-v8+ (antonio&amp;#64;antonio-debian-laptop)
(gcc version 7.1.1 20170707 (Linaro GCC 7.1-2017.08)) #1 SMP PREEMPT Sun Nov
12 19:55:59 GMT 2017
[    0.000000] Boot CPU: AArch64 Processor [410fd034]
[    0.000000] Machine model: Raspberry Pi 3 Model B Rev 1.2
[    0.000000] efi: Getting EFI parameters from FDT:
[    0.000000] efi: UEFI not found.
[    0.000000] cma: Reserved 8 MiB at 0x000000003ac00000
[    0.000000] random: fast init done
[    0.000000] percpu: Embedded 22 pages/cpu &amp;#64;ffffffe77ab7e000 s50456 r8192
d31464 u90112
[    0.000000] Detected VIPT I-cache on CPU0
[    0.000000] CPU features: enabling workaround for ARM erratum 845719
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 238896
[    0.000000] Kernel command line: 8250.nr_uarts=1 bcm2708_fb.fbwidth=656
bcm2708_fb.fbheight=416 bcm2708_fb.fbswap=1 vc_mem.mem_base=0x3ec00000
vc_mem.mem_size=0x40000000  dwc_otg.lpm_enable=0 console=ttyS0,115200
console=tty1 root=PARTUUID=5cd2ad4c-02 rootfstype=ext4 elevator=deadline
fsck.repair=yes rootwait memmap=256M$16M
[    0.000000] PID hash table entries: 4096 (order: 3, 32768 bytes)
[    0.000000] Dentry cache hash table entries: 131072 (order: 8, 1048576
bytes)
[    0.000000] Inode-cache hash table entries: 65536 (order: 7, 524288
bytes)
[    0.000000] Memory: 930484K/970752K available (6972K kernel code, 884K
rwdata, 2304K rodata, 2624K init, 697K bss, 32076K reserved, 8192K
cma-reserved)

... several lines of output ...

[    0.012143] smp: Bringing up secondary CPUs ...
[    0.019337] Detected VIPT I-cache on CPU1
[    0.019402] CPU1: Booted secondary processor [410fd034]
[    0.026438] Detected VIPT I-cache on CPU2
[    0.026480] CPU2: Booted secondary processor [410fd034]
[    0.033553] Detected VIPT I-cache on CPU3
[    0.033594] CPU3: Booted secondary processor [410fd034]
[    0.033729] smp: Brought up 1 node, 4 CPUs
[    0.033857] SMP: Total of 4 processors activated.
[    0.033885] CPU features: detected feature: 32-bit EL0 Support
[    0.034111] CPU: All CPU(s) started at EL2
[    0.034160] alternatives: patching kernel code

... several lines of output ...

Raspbian GNU/Linux 9 raspberrypi ttyS0
raspberrypi login: pi

Password:
Last login: Thu Sep  7 16:23:37 UTC 2017 on ttyS0
Linux raspberrypi 4.14.0-rc8-v8+ #1 SMP PREEMPT Sun Nov 12 19:55:59 GMT 2017
aarch64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
pi&amp;#64;raspberrypi:~$ uname -a
Linux raspberrypi 4.14.0-rc8-v8+ #1 SMP PREEMPT Sun Nov 12 19:55:59 GMT 2017
aarch64 GNU/Linux
pi&amp;#64;raspberrypi:~$ cat /proc/cpuinfo
processor       : 0
BogoMIPS        : 38.40
Features        : fp asimd evtstrm crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 1
BogoMIPS        : 38.40
Features        : fp asimd evtstrm crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 2
BogoMIPS        : 38.40
Features        : fp asimd evtstrm crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

processor       : 3
BogoMIPS        : 38.40
Features        : fp asimd evtstrm crc32 cpuid
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0xd03
CPU revision    : 4

pi&amp;#64;raspberrypi:~$ sudo shutdown now

... several lines of output ...

[   78.768742] reboot: Power down
&lt;/pre&gt;
&lt;p&gt;The final thing to do was to write the documentation of this port and to create
a pull request:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ARM-software/arm-trusted-firmware/pull/1157"&gt;https://github.com/ARM-software/arm-trusted-firmware/pull/1157&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was reviewed and merged, and now the Trusted Firmware-A has an upstream port
for the Raspberry Pi 3! It was a pretty interesting project, I learned a lot
about the Linux kernel boot process and about the kind of problems that people
that do the bringup of a platform have to face.&lt;/p&gt;
&lt;p&gt;I hope you found this article interesting!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2018-03-23, the name of the project is &lt;strong&gt;Trusted Firmware-A&lt;/strong&gt;. All
references to &lt;strong&gt;Arm Trusted Firmware&lt;/strong&gt; have been replaced by the new name.&lt;/p&gt;
&lt;/div&gt;
</content><category term="raspberry-pi"></category><category term="programming"></category><category term="raspberry-pi"></category></entry><entry><title>µCity v1.2</title><link href="http://www.skylyrac.net/2018-01-31-ucity-v1-2.html" rel="alternate"></link><published>2018-01-31T02:10:00+00:00</published><updated>2018-01-31T02:10:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-01-31:/2018-01-31-ucity-v1-2.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;It's a bit late to publish this, but hey, it only comes 7 months late! I had no
website to upload this to, anyway...&lt;/p&gt;
&lt;p&gt;In any case, here it is, &lt;strong&gt;µCity&lt;/strong&gt;, the  open-source city-building game for Game
Boy Color! It can also be spelled 'uCity', but it's pronounced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;It's a bit late to publish this, but hey, it only comes 7 months late! I had no
website to upload this to, anyway...&lt;/p&gt;
&lt;p&gt;In any case, here it is, &lt;strong&gt;µCity&lt;/strong&gt;, the  open-source city-building game for Game
Boy Color! It can also be spelled 'uCity', but it's pronounced 'micro-city'.&lt;/p&gt;
&lt;img alt="Screenshot of µCity" class="align-center" src="./images/ucity-screenshot.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This game is completely free, licensed under the GPLv3+. Just download the ROM,
install a Game Boy Color emulator, and play! The last release of the game should
be here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/ucity/releases"&gt;https://github.com/AntonioND/ucity/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also play on real hardware. Even though the game has been developed
using mainly emulators, it has been verified to work on hardware. The game
detects how much available space there is and adjust the maximum number of saved
cities accordingly.&lt;/p&gt;
&lt;p&gt;Here's a &lt;a class="reference external" href="https://www.youtube.com/watch?v=2rir-TVx020"&gt;video&lt;/a&gt;, in case you are
too lazy to test the ROM. If needed, there is a short manual with instructions
for the player in the file &lt;tt class="docutils literal"&gt;manual.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I've been asked quite a few times about this, so I might as well clarify it. A
direct port of this game to the monochrome Game Boy isn't possible. This game
uses most of the extra RAM that was added to the Game Boy Color, which isn't
available in a regular Game Boy. While the Game Boy Color has 32 KiB of WRAM,
the Game Boy only has 8 KB, and this game currently uses 30 KB more or less.
Only a really limited version of this game with a much smaller map and much
fewer features would fit in a Game Boy.&lt;/p&gt;
&lt;p&gt;Oh, and this game has its own article in Hackaday!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://hackaday.com/2017/06/20/writing-a-new-game-for-the-game-boy-color/"&gt;https://hackaday.com/2017/06/20/writing-a-new-game-for-the-game-boy-color/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to actually take a look at it, the &lt;a class="reference external" href="https://github.com/AntonioND/ucity"&gt;source code is available here&lt;/a&gt;. An open-source project is a lot worse
without documentation, though! That's why the code has a lot of comments and why
there is a highly detailed documentation in the &lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; folder. And also
because assembly code without comments can't be understood even by the developer
who wrote it originally. :) To compile it, you'll just need &lt;a class="reference external" href="https://github.com/rednex/rgbds/"&gt;RGBDS&lt;/a&gt;. It should be possible to compile the game
on Linux, MinGW, Cygwin, etc.&lt;/p&gt;
&lt;p&gt;Other tools used to create the game are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmpt.org/"&gt;Open ModPlug Tracker&lt;/a&gt;: This is just a program to edit
tracker style music. It has been used to compose the music used by GBT Player,
my music player library. It can be found &lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.devrs.com/gb/hmgd/gbtd.html"&gt;GBTD&lt;/a&gt; (Game Boy Tile Designer) and
&lt;a class="reference external" href="http://www.devrs.com/gb/hmgd/gbmb.html"&gt;GBMB&lt;/a&gt; (Game Boy Map Builder):
Graphics edition tools (for Windows, but they run on Wine).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;beware: For the emulator BGB (&lt;a class="reference external" href="http://bgb.bircd.org/"&gt;http://bgb.bircd.org/&lt;/a&gt;), extremely useful tool
used to develop this game.&lt;/li&gt;
&lt;li&gt;Pan of Anthrox, Marat Fayzullin, Pascal Felber, Paul Robson, Martin Korth
(nocash) and kOOPa for the pandocs.&lt;/li&gt;
&lt;li&gt;Otaku No Zoku (Justin Lloyd) for the Gameboy Crib Sheet.&lt;/li&gt;
&lt;li&gt;Everyone that has contributed to develop &lt;tt class="docutils literal"&gt;RGBDS&lt;/tt&gt; over the years, specially
Carsten Sorensen, Justin Lloyd, Vegard Nossum and Anthony J. Bentley.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: If the name of the game breaks your website, fix your website. :P&lt;/p&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Welcome to my new blog!</title><link href="http://www.skylyrac.net/2018-01-29-welcome-to-my-new-blog.html" rel="alternate"></link><published>2018-01-29T01:54:00+00:00</published><updated>2018-02-03T21:09:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-01-29:/2018-01-29-welcome-to-my-new-blog.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After almost a year of having my website down, I decided it was time to do
something about it! This is my attempt at creating a new website.&lt;/p&gt;
&lt;p&gt;I'm using &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;. Let's see how code
looks like, for example...:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* Print …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After almost a year of having my website down, I decided it was time to do
something about it! This is my attempt at creating a new website.&lt;/p&gt;
&lt;p&gt;I'm using &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;. Let's see how code
looks like, for example...:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* Print string */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will take some time to create articles about my latest projects, and I've
reuploaded all the entries of my old blog and website!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.skylyrac.net/old-site/index.html"&gt;Old website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, this change means that any comment left on my old blog will be
lost, but well, there weren't that many...&lt;/p&gt;
&lt;p&gt;Antonio&lt;/p&gt;
</content><category term="blog"></category><category term="blog"></category></entry><entry><title>Geometrix [GBC Game][GBDev 2015]</title><link href="http://www.skylyrac.net/2015-12-04-geometrix-gbc-game-gbdev-2015.html" rel="alternate"></link><published>2015-12-04T16:32:00+00:00</published><updated>2018-02-01T23:27:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-12-04:/2015-12-04-geometrix-gbc-game-gbdev-2015.html</id><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;This is my entry for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1385"&gt;GBdev Game Boy Coding Compo 2015&lt;/a&gt;! Sadly, &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1448"&gt;only one more
game entered the compo&lt;/a&gt;.
But anyway, here it is!&lt;/p&gt;
&lt;p&gt;Video: &lt;a class="reference external" href="https://www.youtube.com/watch?v=qAvW2n8Qbeg"&gt;https://www.youtube.com/watch?v=qAvW2n8Qbeg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source, binary and more information:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/geometrix"&gt;https://github.com/AntonioND/geometrix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;img alt="Screenshot of Geometrix" class="align-center" src="./images/geometrix.png" /&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Tetris made with a PIC18F2550</title><link href="http://www.skylyrac.net/2015-09-20-tetris-made-with-a-pic18f2550.html" rel="alternate"></link><published>2015-09-20T23:06:00+01:00</published><updated>2015-09-20T23:06:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-09-20:/2015-09-20-tetris-made-with-a-pic18f2550.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm writing to show you my newest electronic creation: a &amp;quot;videogame
console&amp;quot; made with a &lt;strong&gt;PIC18F2550&lt;/strong&gt; as its brain. It has a 8x16 LED matrix as
main display and 4 seven segment displays to show the player score, for example.
It has 8 buttons (4 in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm writing to show you my newest electronic creation: a &amp;quot;videogame
console&amp;quot; made with a &lt;strong&gt;PIC18F2550&lt;/strong&gt; as its brain. It has a 8x16 LED matrix as
main display and 4 seven segment displays to show the player score, for example.
It has 8 buttons (4 in a pad, the rest like a Game Boy or similar). The PIC
doesn't have enough pins to control everything easily, so I've used a few
74HC595 to control the LED matrix and the seven segment displays, and a 74HC166
to read the state of all buttons.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo of the front of the board" src="./images/tetris-pic-front.jpg" style="width: 49%;" /&gt; &lt;img alt="Photo of the back of the board" src="./images/tetris-pic-back.jpg" style="width: 49%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The game I've decided to code for the demonstration is a simple Tetris, written
in 100% assembly. YouTube &lt;strong&gt;video&lt;/strong&gt; here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5fmSbreJsDI"&gt;https://www.youtube.com/watch?v=5fmSbreJsDI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buttons&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Move left/right.&lt;/li&gt;
&lt;li&gt;Rotate clockwise/counterclockwise.&lt;/li&gt;
&lt;li&gt;Go down quickly, go down instantly.&lt;/li&gt;
&lt;li&gt;Pause, reset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the moment I haven't decided if I should post the schematics and the source
code for various reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I used different systems to power the LED matrix and the seven segment
displays. A decent design should use the same system.&lt;/li&gt;
&lt;li&gt;Some resistors are too high and the LEDs, when lit, are too dim. I didn't
consider the scanline refresh when calculating the resistors, so the actual
intensity is a lot lower than I thought.&lt;/li&gt;
&lt;li&gt;The source code of the game is a bit messy (the &amp;quot;drivers&amp;quot; code is good,
though).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, I hope you like it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Well, whatever, I'll just put the schematics and the code... :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schematics&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="Schematics in color" class="align-center" src="./images/tetris-pic-sch.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Schematics in black and white" class="align-center" src="./images/tetris-pic-sch-bw.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don't expect it to be clean and/or human readable. The file 'main.asm' contains
the 'drivers', and 'tetris.asm' contains the game. It's fairly easy to modify it
to change some of the pin assignments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download (gEDA schematics + assembly code + assembled .hex file)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New version (2015/10/06), with a small modification to prevent &amp;quot;ghosting&amp;quot;
between displays when performing the scanline change. Also fixed a bug that
didn't remove completed lines before checking if game over.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/tetris_pic_20151006.tar.gz"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible improvements&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Change pull-down resistors for the buttons (R29-R36) by 10K resistors.&lt;/li&gt;
&lt;li&gt;Change LED resistors (330 Ohm) by 300 or maybe 220 resistors (R1-R16 and
R37-R44).&lt;/li&gt;
&lt;li&gt;Make the LED matrix and the seven segment displays work the same way (changing
the displays by common-anode equivalents and the transistors used to drive
them).&lt;/li&gt;
&lt;/ul&gt;
</content><category term="electronics"></category><category term="electronics"></category><category term="programming"></category></entry><entry><title>Electronic dice</title><link href="http://www.skylyrac.net/2015-07-12-electronic-dice.html" rel="alternate"></link><published>2015-07-12T20:15:00+01:00</published><updated>2018-02-01T23:25:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-07-12:/2015-07-12-electronic-dice.html</id><summary type="html">&lt;p&gt;Well, after a few weeks not doing almost anything I've decided to post the last
useless device I've made. It's a simple electronic dice using a decade counter
and some inverters (used for logic and as oscillator). I decided not to use a
microcontroller because it felt like it was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, after a few weeks not doing almost anything I've decided to post the last
useless device I've made. It's a simple electronic dice using a decade counter
and some inverters (used for logic and as oscillator). I decided not to use a
microcontroller because it felt like it was cheating for a circuit this
simple... There's not much to say: pressing the button will enable the counter
and releasing the button will stop it and show a &amp;quot;random&amp;quot; number. The counter is
very fast so it's impossible to guess what number is going to show when the
button is released. Here are a few pictures:&lt;/p&gt;
&lt;img alt="Photo 1 of the dice" class="align-center" src="./images/electronic-dice-1.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Photo 2 of the dice" class="align-center" src="./images/electronic-dice-2.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I used foam to hold the board and the battery in place so that it could be put
into a handmade box.&lt;/p&gt;
&lt;img alt="Photo 3 of the dice" class="align-center" src="./images/electronic-dice-3.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Photo 4 of the dice" class="align-center" src="./images/electronic-dice-4.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And, at last, a video of the circuit working:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=t7blrTmsfKg"&gt;https://www.youtube.com/watch?v=t7blrTmsfKg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While it's a really simple circuit to design and make, I've decided to create
schematics in case someone wants to make this:&lt;/p&gt;
&lt;img alt="Schematics of the dice" class="align-center" src="./images/electronic-dice-schematics.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Almost all components are specified in the schematic. The ones that aren't
completely specified are the voltage regulator (78L05), the inverter IC (74LS04)
and the decade counter (HFC4017).&lt;/p&gt;
&lt;p&gt;There are two interesting things about this circuit, and the reason of both of
them is that I didn't want to buy many components, so I decided to use whatever
I had at home:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first one is that the oscillator is made of two inverters (and a capacitor
and resistor). The values I've used for R and C make it oscillate at 390Hz
approximately.&lt;/li&gt;
&lt;li&gt;The second one is that I don't use an IC with OR gates. I've decided to use
some diodes and resistors to create them
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Diode_logic"&gt;https://en.wikipedia.org/wiki/Diode_logic&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The circuit uses a 9 V battery. The logic of the circuit needs about 11 mA, and
the LEDs need around 9 mA each. That means it uses from 20 mA (when only 1 LED
is on) to 65 mA (when 6 LEDs are on). The 7 LEDs can't be turned on at the same
time, obviously.&lt;/p&gt;
</content><category term="electronics"></category><category term="electronics"></category></entry><entry><title>GBT Player usage</title><link href="http://www.skylyrac.net/2015-04-08-gbt-player-usage.html" rel="alternate"></link><published>2015-04-08T01:36:00+01:00</published><updated>2018-02-01T23:23:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-04-08:/2015-04-08-gbt-player-usage.html</id><summary type="html">&lt;p&gt;Over the last months I've seen a few tutorials about GB programming that use my
GBT Player for music. I have to say a few things about that.&lt;/p&gt;
&lt;p&gt;First: Thanks a lot for using my library! The fact that you like it enough to
use it in your projects is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last months I've seen a few tutorials about GB programming that use my
GBT Player for music. I have to say a few things about that.&lt;/p&gt;
&lt;p&gt;First: Thanks a lot for using my library! The fact that you like it enough to
use it in your projects is what keeps it alive. Version 2 only happened because
I was asked to add a few things to previous versions.&lt;/p&gt;
&lt;p&gt;Second: &lt;strong&gt;You are using it wrong!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok, it's partly my fault, but it's your fault too, obviously: &lt;em&gt;You are using
GBDK&lt;/em&gt;... I mean, you just don't understand the implications of the ROM banking
system the GB uses. I know I don't really have to explain this kind of things,
but I feel a bit responsible for my library, so I'm going to explain why you are
using it wrong and how to fix it. Let's see...&lt;/p&gt;
&lt;p&gt;My (now old) example does something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;gb/gb.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // Include GBDK lib&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;gbt_player.h&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt; // Include player&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Reference to song data&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Disable interrupts while they are being configured&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;disable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;gbt_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Setup song&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;gbt_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// The default is 0, this could be removed&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;add_VBL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gbt_update&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Add callback for VBL interrupt (*)&lt;/span&gt;
&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;set_interrupts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VBL_IFLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Enable VBL interrupt&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;enable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;wait_vbl_done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Wait loop with reduced CPU usage&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;While the new one does this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;gb/gb.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // Include GBDK lib&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;gbt_player.h&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt; // Include player&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Reference to song data&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Disable interrupts while they are being configured&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;disable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;gbt_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Setup song&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;gbt_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// The default is 0, this could be removed&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;set_interrupts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VBL_IFLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Enable VBL interrupt&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;enable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;wait_vbl_done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Wait loop with reduced CPU usage&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;gbt_update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Update player (*)&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;So what's the big deal?&lt;/p&gt;
&lt;p&gt;Well, let's explain how the GB banking system works. You should know that. If
you don't know that, you shouldn't be coding for GB, but whatever... The first
16 KB of the ROM are always mapped to addresses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;0000h-3FFFh&lt;/span&gt;&lt;/tt&gt;. This means that
this code and data is always available to read! That's the place where you want
your game engine to be. But GBT code doesn't go there by default. It goes to
bank 1. Why? Because 16 KB is not much space. GBT player needs quite a bit of
space and it's stupid to put it in bank 0 when GBDK is already using a lot of
that space. It would leave you even less space for your code!&lt;/p&gt;
&lt;p&gt;Banks 1 and beyond are mapped to addresses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;4000h-7FFFh&lt;/span&gt;&lt;/tt&gt;. Only one of them can
be mapped at once there, so they must be switched when the program needs to
access to data in other bank. This means that you can have as much 16 KB banks
as you need (so you could have ROMs with &lt;em&gt;infinite&lt;/em&gt; banks), but you have to take
care to switch to the correct bank whenever you are trying to get some data or
execute some code.&lt;/p&gt;
&lt;p&gt;So GBT runs in bank 1, again, what's the big deal?&lt;/p&gt;
&lt;p&gt;The problem here is that the first example uses interrupt for the player update
function. If your game loop is small, and your ROM is small, and your game is
more or less a &amp;quot;Hello World!&amp;quot; this won't be a problem because you won't use bank
switching and bank 1 will always be available. If your game is big and you need
to load data from other banks, there are problems because you will sometimes use
data from other banks (in fact, GBT Player loads data from the bank where the
song is placed, but it returns to bank 1 afterwards to execute its code).&lt;/p&gt;
&lt;p&gt;An interrupt means that the CPU jumps to an interrupt vector, executes its code
and then returns to its previous state. Again, you should know that. If you
don't, something is wrong and you should stop and learn this kind of things
first. But you won't, that's why I'm explaining this. This is useful to know
when hardware events happen, like screen redraw. Vertical blanking period is
entered when the current frame has been drawn, so it happens once every frame
(around 60 times per second). This interrupt is very useful to synchronize the
game, and GBT Player uses it to update itself.&lt;/p&gt;
&lt;p&gt;Let's say you want to load a background placed in bank 4. You switch to bank 4,
start copying... and vertical blank period is reached. An interrupt is triggered
and CPU jumps to the VBL interrupt vector at address &lt;tt class="docutils literal"&gt;0040h&lt;/tt&gt;. It eventually
calls &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt;, which switches to bank 1, and returns. The CPU returns
to the same state as before the interrupt... but the ROM bank is still bank 1,
so the copy won't work because it's reading incorrect data! This can also happen
with code. In that case, the game is likely to crash immediately. If you only
had banks 0 and 1, this couldn't happen. That's why small demos and games run
fine, but they will eventually crash if they are more than 32 KB big (2 banks).&lt;/p&gt;
&lt;p&gt;That's why the code of &lt;tt class="docutils literal"&gt;gbt_player.h&lt;/tt&gt; says &amp;quot;this changes to bank 1!&amp;quot;. To warn
you that this does changes to the memory that you have to revert. I don't know
what system GBDK uses to know what ROM bank is being used or anything like that.
When I made a game (that I didn't finish) I created a ROM bank stack to keep
track of the banks that I used, so I could save the bank that was being used
when &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt; was called and I could restore it afterwards. I suppose
most of you won't be able to do something like that, so the new example is an
alternative.&lt;/p&gt;
&lt;p&gt;The new example calls &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt; every frame in the main loop of the game.
You need to put it in EVERY main loop, and you need to synchronize the game to
VBL with &lt;tt class="docutils literal"&gt;wait_vbl_done()&lt;/tt&gt;. That's it. No more problems of banking. Well,
there still can be problems, but it's more difficult. If you can write code that
has that kind of problems, you should be able to fix them.&lt;/p&gt;
&lt;p&gt;In fact, if your game doesn't use &lt;tt class="docutils literal"&gt;wait_vbl_done()&lt;/tt&gt;, your game is evil. This
function enters a low consumption state until VBL is entered, and it should be
used whenever it's possible. I've seen code of &amp;quot;games&amp;quot; that don't use it. They
are bad. No, seriously, use that function. Please.&lt;/p&gt;
&lt;p&gt;Examples of bad tutorials (I could only find 2 right now, both in Spanish):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.elotrolado.net/hilo_desarrollo-software-proyectos-de-darkryoga_1901847"&gt;http://www.elotrolado.net/hilo_desarrollo-software-proyectos-de-darkryoga_1901847&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.fasebonus.net/foro/index.php?topic=36662.msg60626#msg60626"&gt;http://www.fasebonus.net/foro/index.php?topic=36662.msg60626#msg60626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: But you are, in fact, using GBDK, which should be avoided. :P It's better if
you try to learn ASM and use RGBDS or WLA-DX assemblers instead. The GB CPU is
very slow, so you need every CPU cycle you can get. Maybe you are doing a
text-only game, and then GBDK should be fine, but you are wasting a lot of CPU
power. GBDK functions are mostly written in ASM. I know it's harder and you want
to see results right now, but it's better.&lt;/p&gt;
&lt;p&gt;PS2: Anyway, update to the latest version (2.1.1 at the time of writing this,
the same as 2.1.0 but with a new GBDK example):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;https://github.com/AntonioND/gbt-player&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Game Boy Camera documentation</title><link href="http://www.skylyrac.net/2015-03-12-game-boy-camera-documentation.html" rel="alternate"></link><published>2015-03-12T13:20:00+00:00</published><updated>2018-02-01T23:17:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-03-12:/2015-03-12-game-boy-camera-documentation.html</id><summary type="html">&lt;p&gt;Over the last few weeks I've been doing some reverse engineering on the GB
Camera and I think I've documented it good enough for most things. I've reversed
the cartridge controller registers and measured the capture timings. The only
thing that I can't understand is the level/gain control of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last few weeks I've been doing some reverse engineering on the GB
Camera and I think I've documented it good enough for most things. I've reversed
the cartridge controller registers and measured the capture timings. The only
thing that I can't understand is the level/gain control of the sensor (its
datasheet is really bad) but it shouldn't matter for an emulator. I've
implemented this in &lt;a class="reference external" href="https://github.com/AntonioND/giibiiadvance"&gt;GiiBiiAdvance&lt;/a&gt; and it's working perfectly
(you'll have to wait for the next version if you want to check it, though), so I
guess that's all that matters.&lt;/p&gt;
&lt;p&gt;And a pic of my hardware setup (click to zoom):&lt;/p&gt;
&lt;img alt="Photo of my hardware setup" class="align-center" src="./images/gbcam-arduino.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The repository is here: &lt;a class="reference external" href="https://github.com/AntonioND/gbcam-rev-engineer"&gt;https://github.com/AntonioND/gbcam-rev-engineer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first release is here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbcam-rev-engineer/releases/tag/v1.0"&gt;https://github.com/AntonioND/gbcam-rev-engineer/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: Did I mention before that I won the GBdev 2014 compo? :&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?id=244"&gt;http://gbdev.gg8.se/forums/viewtopic.php?id=244&lt;/a&gt;&lt;/p&gt;
</content><category term="hacking"></category><category term="gameboy"></category><category term="programming"></category><category term="giibiiadvance"></category><category term="hacking"></category><category term="electronics"></category></entry><entry><title>Pong 3DS v1.0</title><link href="http://www.skylyrac.net/2015-02-18-pong-3ds-v1-0.html" rel="alternate"></link><published>2015-02-18T00:21:00+00:00</published><updated>2018-02-01T23:07:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-02-18:/2015-02-18-pong-3ds-v1-0.html</id><summary type="html">&lt;p&gt;Well, after a few weeks of coding at last I have a release of this game. :)&lt;/p&gt;
&lt;p&gt;This is just a 3D pong, inspired by my old &lt;a class="reference external" href="www.skylyrac.net/old-site/pong3ds.html"&gt;Pong 3DS for Nintendo DS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was a test to see if I could manage to setup a correct perspective for
stereoscopic 3D, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, after a few weeks of coding at last I have a release of this game. :)&lt;/p&gt;
&lt;p&gt;This is just a 3D pong, inspired by my old &lt;a class="reference external" href="www.skylyrac.net/old-site/pong3ds.html"&gt;Pong 3DS for Nintendo DS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was a test to see if I could manage to setup a correct perspective for
stereoscopic 3D, but I decided to make a simple game out of it.&lt;/p&gt;
&lt;p&gt;I haven't used hardware accelerated graphics because I couldn't manage to
compile any shader assembler (except from Picasso, but it's a bit outdated). I
originally made this 3D software engine for GBA, so there are still a few files
from Tonc's library for GBA. Anyway, this game always runs at 60 FPS. :)&lt;/p&gt;
&lt;p&gt;If anyone cares, the 3D engine can draw lines, triangles, quads, line strips,
triangle strips and quad strips, all of them With alpha blending. Quads are
drawn using a function used just for them to draw them faster, not by drawing
two triangles. It supports directional lighting (up to 32 lights, limited to 2
because why more) and ambient lighting. It can sort polygons with painter's
algorithm (no buffer-Z). It doesn't support textured polygons.&lt;/p&gt;
&lt;p&gt;Oh, the 3D slider actually does something when you change its position. The
engine renders each top screen in a separate core when working in 3D mode to
make it run always at the same FPS.&lt;/p&gt;
&lt;p&gt;Press Y to take a screenshot in PNG format (2 files in 3D mode, 1 in 2D mode) or
SELECT to exit. Use the joystick to move the pad, and A to jump in the 2.5D
room.&lt;/p&gt;
&lt;p&gt;For now, in the main menu, press a button in the touchscreen to enter a game
room. Pressing START in a room will return the game to the main menu.&lt;/p&gt;
&lt;p&gt;Holding L and R at the same time will show the FPS and the CPU usage.&lt;/p&gt;
&lt;p&gt;This game is licensed under the GPL Version 3.&lt;/p&gt;
&lt;p&gt;Binaries here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/pong-3ds/releases"&gt;https://github.com/AntonioND/pong-3ds/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source code and more information here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/pong-3ds"&gt;https://github.com/AntonioND/pong-3ds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And a few screenshots:&lt;/p&gt;
&lt;img alt="Screenshots 1 of Pong 3DS" class="align-center" src="./images/pong-3ds-screenshot-1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Screenshots 2 of Pong 3DS" class="align-center" src="./images/pong-3ds-screenshot-2.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Screenshots 3 of Pong 3DS" class="align-center" src="./images/pong-3ds-screenshot-3.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Screenshots 4 of Pong 3DS" class="align-center" src="./images/pong-3ds-screenshot-4.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="nintendo-3ds"></category><category term="nintendo-3ds"></category><category term="programming"></category></entry><entry><title>Pong 3DS, now in an actual Nintendo 3DS!</title><link href="http://www.skylyrac.net/2015-01-24-pong-3ds-now-in-an-actual-n3ds.html" rel="alternate"></link><published>2015-01-24T17:16:00+00:00</published><updated>2018-02-01T23:16:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-01-24:/2015-01-24-pong-3ds-now-in-an-actual-n3ds.html</id><summary type="html">&lt;p&gt;Ok, this has nothing to do with &lt;a class="reference external" href="www.skylyrac.net/old-site/pong3ds.html"&gt;this other game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is just a stupid stereoscopic 3D software rendering test. Oh, the 3D slider
actually does something when you change its position.&lt;/p&gt;
&lt;p&gt;No screenshot because it's just a bunch of wireframe boxes IN THREE DIMENSIONS.
Maybe next time.&lt;/p&gt;
&lt;p&gt;Link: &lt;a class="reference external" href="https://github.com/AntonioND/pong-3ds"&gt;https …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, this has nothing to do with &lt;a class="reference external" href="www.skylyrac.net/old-site/pong3ds.html"&gt;this other game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is just a stupid stereoscopic 3D software rendering test. Oh, the 3D slider
actually does something when you change its position.&lt;/p&gt;
&lt;p&gt;No screenshot because it's just a bunch of wireframe boxes IN THREE DIMENSIONS.
Maybe next time.&lt;/p&gt;
&lt;p&gt;Link: &lt;a class="reference external" href="https://github.com/AntonioND/pong-3ds"&gt;https://github.com/AntonioND/pong-3ds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT (2015/01/25)&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Well, I've updated it a bit. Filled polygons, lighting, &lt;strong&gt;screenshots&lt;/strong&gt;...&lt;/p&gt;
&lt;img alt="Screenshots of Pong 3DS" class="align-center" src="./images/pong-3ds-screenshot.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="nintendo-3ds"></category><category term="nintendo-3ds"></category><category term="programming"></category></entry><entry><title>Back to Color [GBC Demo][GBDev 2014]</title><link href="http://www.skylyrac.net/2014-06-30-back-to-color-gbc-demo-gbdev-2014.html" rel="alternate"></link><published>2014-06-30T00:01:00+01:00</published><updated>2018-02-01T23:19:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-06-30:/2014-06-30-back-to-color-gbc-demo-gbdev-2014.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm here to show you my first GBC demo! Made specially for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?id=173"&gt;2014
GBDev Game Boy Coding Compo&lt;/a&gt;.
In fact, I started it like four years ago, but stopped after doing 3 scenes (the
first effect, the text scroller at the end of the first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm here to show you my first GBC demo! Made specially for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?id=173"&gt;2014
GBDev Game Boy Coding Compo&lt;/a&gt;.
In fact, I started it like four years ago, but stopped after doing 3 scenes (the
first effect, the text scroller at the end of the first song and the colorful
horizontal bars before the matrix effect). I've coded the rest in just a few
weeks, in fact I started doing new effects a few days before the GBDev compo
announcement. I've coded it and made the music, the only thing I haven't done is
the train screen graphics and the credits graphics (by jordirafel). I'm not a
very good musician, so... Oh, and it shows a little credits screen in non-color
GBs! Some screenshots here:&lt;/p&gt;
&lt;img alt="Screenshots of Back to Color in GBC mode" class="align-center" src="./images/back_to_color_screenshots.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Screenshot of Back to Color in DMG mode" class="align-center" src="./images/back_to_color_dmg_screenshot.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here it is, the download link:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/back_to_color.zip"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to test it in an emulator (like &lt;a class="reference external" href="http://bgb.bircd.org/"&gt;BGB,&lt;/a&gt;
&lt;a class="reference external" href="http://sourceforge.net/projects/gambatte/"&gt;Gambatte&lt;/a&gt; or &lt;a class="reference external" href="http://vba-m.com/"&gt;VBA-M&lt;/a&gt;), most of them have a &amp;quot;Frame Blending&amp;quot; option, enable it
if possible. It works in real hardware, of course! Tested in DMG, MGB, GBC, GBA
and GBA SP. If you want to skip some parts, hold up/right/down/left when the
demo is loading if you want to skip 1/2/3/4 songs. Non-color GB only show the
reduced credits screen!&lt;/p&gt;
&lt;p&gt;I have also recorded a video with VBA-M in case you are too lazy to
download an emulator! :P The shadows in the bouncing balls effect are
incorrect, they should be the same color, but the rest is correct. In a
real GBC or an emulator it looks fine.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=eSEsd1OGA74"&gt;https://www.youtube.com/watch?v=eSEsd1OGA74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The demo has been coded using &lt;a class="reference external" href="https://github.com/AntonioND/rgbds"&gt;my fork of RGBDS&lt;/a&gt; (with a few bugfixes), a &lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;GBT Player&lt;/a&gt; version modified to use only the
first ROM bank, OpenMPT to make the music, GBTK and GBMB. To test it I've used
BGB, Gambatte, VBA-M, my &lt;a class="reference external" href="https://github.com/AntonioND/giibiiadvance"&gt;GiiBiiAdvance&lt;/a&gt;... and real hardware.&lt;/p&gt;
&lt;p&gt;I hope you like it! :)&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Oh...&lt;/p&gt;
&lt;p&gt;One last thing...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/back-to-color"&gt;Source code GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yeah, that's everything. :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2018-01-31, this demo should be able to compile with the upstream RGBDS,
that is located here: &lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;https://github.com/rednex/rgbds&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category><category term="demoscene"></category></entry><entry><title>Faceball 2000 Double Speed Mod v0.1</title><link href="http://www.skylyrac.net/2014-06-04-faceball-2000-double-speed-mod-v0-1.html" rel="alternate"></link><published>2014-06-04T16:29:00+01:00</published><updated>2014-06-04T16:29:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-06-04:/2014-06-04-faceball-2000-double-speed-mod-v0-1.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;A few days ago I discovered this game, I tried it, and got disappointed because
it has a painfully low framerate (&lt;a class="reference external" href="https://www.youtube.com/watch?v=KQAhnNiOu54"&gt;video&lt;/a&gt;)... So I opened it with BGB and
decided to fix it! :)&lt;/p&gt;
&lt;p&gt;I've changed the initial jump to an empty area just before the ROM header. I
just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;A few days ago I discovered this game, I tried it, and got disappointed because
it has a painfully low framerate (&lt;a class="reference external" href="https://www.youtube.com/watch?v=KQAhnNiOu54"&gt;video&lt;/a&gt;)... So I opened it with BGB and
decided to fix it! :)&lt;/p&gt;
&lt;p&gt;I've changed the initial jump to an empty area just before the ROM header. I
just switch to CPU double speed mode, wait for VBL, load greyscale palettes for
BGs and sprites and jump to real start point. Of course, it only works in GBC
and GBA now! Header's GBC flag has been changed, and checksums have been fixed.&lt;/p&gt;
&lt;p&gt;Just to make it clear: This makes the CPU faster, so everything changes. Music
is still the same because it uses interrupts for synchronization, framerate is
multiplied by at least 2, but timer countdown is affected! Also, link
communications are affected.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You'll need an IPS patcher like &lt;a class="reference external" href="http://www.romhacking.net/utilities/240/"&gt;Lunar IPS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And, of course, the &amp;quot;Faceball 2000 (USA).gb&amp;quot; ROM, which I won't provide here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The patch you have to apply is here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/faceball_2000_gbc_mod_v01.ips"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven't tested Link functions, but it should work between modified copies of
the game. I haven't changed the way the game works. It still copies VRAM data
manually instead of using GDMA or something like that, but that would need some
extra work, and it runs fine now. I hope you like it!&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content><category term="hacking"></category><category term="gameboy"></category><category term="hacking"></category></entry><entry><title>GBT Player v1.2</title><link href="http://www.skylyrac.net/2014-05-01-gbt-player-v1-2.html" rel="alternate"></link><published>2014-05-01T15:36:00+01:00</published><updated>2014-05-01T15:36:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-05-01:/2014-05-01-gbt-player-v1-2.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This is just a bugfix release. I've modified the samples included in the mod
file in order to avoid transposing notes when converting it with mod2gbt. This
means that you can use all notes from C3 to B8.&lt;/p&gt;
&lt;p&gt;You can find source, binaries and examples (RGBDS and GBDK …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This is just a bugfix release. I've modified the samples included in the mod
file in order to avoid transposing notes when converting it with mod2gbt. This
means that you can use all notes from C3 to B8.&lt;/p&gt;
&lt;p&gt;You can find source, binaries and examples (RGBDS and GBDK) for version 1.2
here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player/releases/tag/v1.2"&gt;https://github.com/AntonioND/gbt-player/releases/tag/v1.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And any other improvements, here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;https://github.com/AntonioND/gbt-player&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an old version, please, check this link for the latest release:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player/releases"&gt;https://github.com/AntonioND/gbt-player/releases&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Switch GBA into GBC mode by software</title><link href="http://www.skylyrac.net/2014-04-20-switch-gba-into-gbc-mode-by-software.html" rel="alternate"></link><published>2014-04-20T20:46:00+01:00</published><updated>2018-02-01T23:12:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-04-20:/2014-04-20-switch-gba-into-gbc-mode-by-software.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I know dwedit did something like this a few years ago, but I never managed to
compile its code and make it run (even though the precompiled binary worked
fine). Anyway, the code was just an incomprehensible mess:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.dwedit.org/dwedit_board/viewtopic.php?id=339"&gt;http://www.dwedit.org/dwedit_board/viewtopic.php?id=339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This morning …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I know dwedit did something like this a few years ago, but I never managed to
compile its code and make it run (even though the precompiled binary worked
fine). Anyway, the code was just an incomprehensible mess:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.dwedit.org/dwedit_board/viewtopic.php?id=339"&gt;http://www.dwedit.org/dwedit_board/viewtopic.php?id=339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This morning I've read that the GBA bios still had the piece of code that
switches the GBA into GBC mode, like Nintendo planned to do in the beginning
(before deciding that it would be better to do it with a hardware switch).&lt;/p&gt;
&lt;p&gt;I've disassembled the part that performs this switch and made a little demo to
show that it works! Here it is:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gba-switch-to-gbc"&gt;https://github.com/AntonioND/gba-switch-to-gbc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But it doesn't end here! It can also apply an affine transformation to the GBC
video output, and even enable mosaic effect or &lt;tt class="docutils literal"&gt;GREENSWP&lt;/tt&gt; register! The
&lt;tt class="docutils literal"&gt;GREENSWP&lt;/tt&gt; register works a bit different than in GBA mode, by the way.&lt;/p&gt;
&lt;p&gt;The bad thing is that the video output only works in GB Micro, in GBA and GBA SP
it shows a black screen, and in DS it doesn't work at all (it doesn't have a GB
CPU).&lt;/p&gt;
&lt;p&gt;I've also uploaded a video:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=-SkR8SAdS9w"&gt;https://www.youtube.com/watch?v=-SkR8SAdS9w&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content><category term="hacking"></category><category term="gameboy"></category><category term="gameboy-advance"></category><category term="c"></category><category term="hacking"></category></entry><entry><title>GiiBiiAdvance 0.2.0</title><link href="http://www.skylyrac.net/2014-04-04-giibiiadvance-0-2-0.html" rel="alternate"></link><published>2014-04-04T12:43:00+01:00</published><updated>2018-02-01T23:19:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-04-04:/2014-04-04-giibiiadvance-0-2-0.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After a few years, at last I continue with this emulator. :P I've been coding
for a few weeks and at last I have a release.&lt;/p&gt;
&lt;p&gt;The main change is that it now uses SDL2 for the GUI, not WinAPI. It can compile
under Windows or Linux with the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After a few years, at last I continue with this emulator. :P I've been coding
for a few weeks and at last I have a release.&lt;/p&gt;
&lt;p&gt;The main change is that it now uses SDL2 for the GUI, not WinAPI. It can compile
under Windows or Linux with the included Code::Blocks project file (I want to
add a Makefile later). You can check the source code here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/giibiiadvance"&gt;https://github.com/AntonioND/giibiiadvance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some screen captures:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GBA emulation" src="./images/giibiiadvance-v0-2-0-screen-1.png" style="width: 49%;" /&gt; &lt;img alt="GBC emulation" src="./images/giibiiadvance-v0-2-0-screen-2.png" style="width: 49%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time I've included GB Camera emulation again. In GiiBiiAdvance
0.1.0 was removed (GiiBii had it). This time I've documented it all, and
I'm planning on doing some reverse engineering on the real hardware
(I've bought a few cartridges just in case I break one). For now, I've
only used the GB Camera software to see how it works, and I've managed
to emulate almost everything (contrast, dithering and brightness). It is
quite complicated to do emulate brightness because it depends on the
webcam and on the GB Camera software, so it changes weirdly sometimes.
The documentation is in &amp;quot;/docs/&amp;quot; folder in GitHub.&lt;/p&gt;
&lt;img alt="GiiBiiAdvance GBA screenshot" class="align-center" src="./images/giibiiadvance-v0-2-0-screen-3.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Of course, there is a debugger. I've improved it since 0.1.0, and now it
allows to dump any image that it displays. There are more changes, see
the changelog in the source code if you are interested.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GBA debugger 1" src="./images/giibiiadvance-v0-2-0-screen-4.png" style="width: 32%;" /&gt; &lt;img alt="GBA debugger 2" src="./images/giibiiadvance-v0-2-0-screen-5.png" style="width: 32%;" /&gt; &lt;img alt="GBC debugger" src="./images/giibiiadvance-v0-2-0-screen-6.png" style="width: 32%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The binaries are here. There are binaries for Windows and Linux
Mint/Ubuntu, with and without webcam support:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/giibiiadvance/releases"&gt;https://github.com/AntonioND/giibiiadvance/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope you like it!&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="gameboy-advance"></category><category term="giibii"></category><category term="giibiiadvance"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>32x8 Yellow LED Matrix</title><link href="http://www.skylyrac.net/2013-03-30-32x8-yellow-led-matrix.html" rel="alternate"></link><published>2013-03-30T00:53:00+00:00</published><updated>2018-02-01T23:10:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2013-03-30:/2013-03-30-32x8-yellow-led-matrix.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I've been messing around with electronics lately (after all, that's what I'm
studying :P), and this is the result! A 32x8 LED Matrix controlled by a
PIC18F2550. You can click in the pictures for full size! At the end of the post
there is a video of the screen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I've been messing around with electronics lately (after all, that's what I'm
studying :P), and this is the result! A 32x8 LED Matrix controlled by a
PIC18F2550. You can click in the pictures for full size! At the end of the post
there is a video of the screen running.&lt;/p&gt;
&lt;img alt="Everything together" class="align-center" src="./images/led-screen-1.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It can show any image you want, and the microcontroller can hold more than 900
of them! You can set individual times for displaying each frame. Apart from
that, you can connect it to a UART port and stream data directly from the
computer. The UART connector is the 2x13 pin connector, but only 3 pin are
soldered. I did it this way because it is easier to connect it to the Raspberry
Pi without making errors.&lt;/p&gt;
&lt;p&gt;I've used the 18F2550 because I had a few of them at home, and I want to make a
driver for streaming using USB instead of UART. It is running at 20MHz from an
external crystal oscillator.&lt;/p&gt;
&lt;p&gt;Connected to the Raspberry Pi and power:&lt;/p&gt;
&lt;img alt="Connected to Raspberry PI" class="align-center" src="./images/led-screen-2.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, some pictures of the boards. First, the simple (but a REAL pain to
solder, it took about 6 hours) 32x8 &lt;strong&gt;LED board&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="LED Board - Front" src="./images/led-screen-3.jpg" style="width: 49%;" /&gt; &lt;img alt="LED Board - Back" src="./images/led-screen-4.jpg" style="width: 49%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A detail of the soldering:&lt;/p&gt;
&lt;img alt="Soldering detail" class="align-center" src="./images/led-screen-5.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, the &lt;strong&gt;expansion board&lt;/strong&gt;. It basically holds some 74HCT164 (SIPO registers),
some transistors and resistors.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Expansion Board - Front" src="./images/led-screen-6.jpg" style="width: 49%;" /&gt; &lt;img alt="Expansion Board - Back" src="./images/led-screen-7.jpg" style="width: 49%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Last, but not least, the &lt;strong&gt;control board&lt;/strong&gt;, which holds the microcontroller (a
PIC18F2550), a decoder, and a buffer. The decoder is 4:16, it should be 3:8 but
I didn't have one of them at home (well, I had one but not negative logic). The
buffer is actually a quad 2-input OR gate chip, I didn't have one buffer either,
and I needed it to convert voltage levels for the Raspberry Pi. Anyway, using
the 4:16 decoder was not a terrible idea because I soldered the 4 inputs to the
PIC and I can use the most significant one to turn off and on the screen (I
could have used the enable pin, but hey...). The button is just the reset
button, and the 4 DIP switches are connected to the PIC, but only the left one
is used for now (for switching between UART streaming and automatic mode). The
USB is not used for now.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Control Board - Front" src="./images/led-screen-8.jpg" style="width: 49%;" /&gt; &lt;img alt="Control Board - Back" src="./images/led-screen-9.jpg" style="width: 49%;" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The yellow LED is just a power indicator, the red and green ones are TX/RX
indicators, and the other red led is unused for now (it lights if there is a USB
cable connected at power up). And yeah, the PIC is in a socket in another
socket, just to make it really easy to remove it from the board. :P&lt;/p&gt;
&lt;p&gt;And here it is, a &lt;a class="reference external" href="http://www.youtube.com/watch?v=-Fc5kiTPeHQ"&gt;video of the display running&lt;/a&gt;. I can't embed the video here.&lt;/p&gt;
&lt;p&gt;The software at the PC side is shown in the video, but it is basically a 32x8
matrix you can edit with the mouse and keyboard. You can also type a text and
the program will convert it to an animation! There are some things missing, like
error checking and sending again the data if the microcontroler says the packet
is corrupted. It is coded in C with SDL, using software rendering because the
Raspberry Pi version of SDL doesn't have OpenGL support.&lt;/p&gt;
&lt;p&gt;If someone asks I could make schematics and upload them, and the code (in
assembly) for the PIC too, but there are a lot of tutorials for making LED
Matrix screens so I think it's not necessary.&lt;/p&gt;
</content><category term="raspberry-pi"></category><category term="programming"></category><category term="raspberry-pi"></category><category term="hacking"></category><category term="electronics"></category><category term="microcontroller"></category></entry><entry><title>Root Locus 0.3</title><link href="http://www.skylyrac.net/2012-09-30-root-locus-0-3.html" rel="alternate"></link><published>2012-09-30T13:21:00+01:00</published><updated>2018-03-23T00:04:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2012-09-30:/2012-09-30-root-locus-0-3.html</id><summary type="html">&lt;p&gt;Well, I should have put this here a few months ago, but I've been lazy to do so.&lt;/p&gt;
&lt;p&gt;Anyway, here is Root Locus 0.3. It now supports discrete systems, and it lets
you set a value for 'k' (the one of the regulator) manually. You can also ask it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, I should have put this here a few months ago, but I've been lazy to do so.&lt;/p&gt;
&lt;p&gt;Anyway, here is Root Locus 0.3. It now supports discrete systems, and it lets
you set a value for 'k' (the one of the regulator) manually. You can also ask it
for the position of the poles in the current position. Everything is in the
manual.&lt;/p&gt;
&lt;p&gt;Link to hpcalc: &lt;a class="reference external" href="http://www.hpcalc.org/details.php?id=7354"&gt;http://www.hpcalc.org/details.php?id=7354&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/rlocus_0_3.zip"&gt;Download (binary + source)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2018-03-23, this project is also hosted on GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/rlocus"&gt;https://github.com/AntonioND/rlocus&lt;/a&gt;&lt;/p&gt;
</content><category term="hp50g"></category><category term="hp50g"></category><category term="programming"></category><category term="c"></category></entry><entry><title>Root Locus 0.2</title><link href="http://www.skylyrac.net/2012-02-04-root-locus-0-2.html" rel="alternate"></link><published>2012-02-04T14:28:00+00:00</published><updated>2018-02-04T00:15:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2012-02-04:/2012-02-04-root-locus-0-2.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;This is a program I've been coding for university. It is a library for the
HP50g. This program draws the root locus of a given transfer function and lets
you add a regulator, as well as change the proportional value of the regulator
and see the new position for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;This is a program I've been coding for university. It is a library for the
HP50g. This program draws the root locus of a given transfer function and lets
you add a regulator, as well as change the proportional value of the regulator
and see the new position for the poles of the system for that value.&lt;/p&gt;
&lt;img alt="Screenshot of Root Locus v0.2" class="align-center" src="./images/root-locus-v0-2.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I've sent it to &lt;a class="reference external" href="http://www.hpcalc.org"&gt;www.hpcalc.org&lt;/a&gt;, too. There are a lot
of great programs there. Anyway, the download link is here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/rlocus_0_2.zip"&gt;Download (Binary + Source)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are instructions on how to install and use it, they should be clear enough
for anybody. The source code is included (HP-GCC 2.0 and HP files for packaging
the library).&lt;/p&gt;
</content><category term="hp50g"></category><category term="hp50g"></category><category term="programming"></category><category term="c"></category></entry><entry><title>Nitro Engine v0.6.1</title><link href="http://www.skylyrac.net/2011-09-01-nitro-engine-v0-6-1.html" rel="alternate"></link><published>2011-09-01T16:02:00+01:00</published><updated>2018-02-01T23:05:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2011-09-01:/2011-09-01-nitro-engine-v0-6-1.html</id><summary type="html">&lt;p&gt;Well... I just looked at the code this morning and saw that the code looked
horrible... So I just reorganised it a bit (included the code of examples),
added a few &amp;quot;static&amp;quot; keywords and fixed a few warnings related to new versions
of libnds and devkitARM. Nothing else, though. Everything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well... I just looked at the code this morning and saw that the code looked
horrible... So I just reorganised it a bit (included the code of examples),
added a few &amp;quot;static&amp;quot; keywords and fixed a few warnings related to new versions
of libnds and devkitARM. Nothing else, though. Everything worked fine, so I
didn't have to do anything else...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="www.skylyrac.net/old-site/nitroengine.html"&gt;Link to web with the download information and those things&lt;/a&gt;&lt;/p&gt;
</content><category term="nintendo-ds"></category><category term="nintendo-ds"></category><category term="programming"></category><category term="nitro-engine"></category></entry><entry><title>GiiBiiAdvance v0.1.0</title><link href="http://www.skylyrac.net/2011-08-26-giibiiadvance-v0-1-0.html" rel="alternate"></link><published>2011-08-26T17:14:00+01:00</published><updated>2018-02-01T23:04:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2011-08-26:/2011-08-26-giibiiadvance-v0-1-0.html</id><summary type="html">&lt;p&gt;Special &lt;a class="reference external" href="http://www.scenebeta.com/noticia/scenery-beta-2011-international-homebrew-showcase"&gt;Scenery Beta 2011&lt;/a&gt;
edition.&lt;/p&gt;
&lt;p&gt;This is what I've been working on since last summer, and I think it is a quite
good program right now. It is just another GBA emulator, just like
&lt;a class="reference external" href="http://vba.ngemu.com/"&gt;VisualBoyAdvance&lt;/a&gt;, and it emulates the same: GB, GBC,
SGB and GBA.&lt;/p&gt;
&lt;p&gt;I've used the GB, GBC …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Special &lt;a class="reference external" href="http://www.scenebeta.com/noticia/scenery-beta-2011-international-homebrew-showcase"&gt;Scenery Beta 2011&lt;/a&gt;
edition.&lt;/p&gt;
&lt;p&gt;This is what I've been working on since last summer, and I think it is a quite
good program right now. It is just another GBA emulator, just like
&lt;a class="reference external" href="http://vba.ngemu.com/"&gt;VisualBoyAdvance&lt;/a&gt;, and it emulates the same: GB, GBC,
SGB and GBA.&lt;/p&gt;
&lt;p&gt;I've used the GB, GBC and SGB emulation code from GiiBii, so GiiBiiAdvance has
the same compatibility (a bit more, I've changed a bit of SGB emulation code).
GBA emulation is, on the other hand, not really high. I mean, lots of ROMs work,
but some of them just show a black screen, or hang when you try to start the
game from the menu... Everything of GBA is emulated (except the serial port),
but there are bugs I can't find, I'll work on it until I get a better
compatibility. Of course, it emulates all save chips, but some saves aren't
compatible with other emulators. It will try to guess the save type if it can't
detect it from the ROM. It lets you take screenshots, and GB Printer output is
saved as a png image. GB Camera is not emulated yet, though, so if you want to
play with that ROM, use GiiBii.&lt;/p&gt;
&lt;p&gt;There is also a quite good debugger, with a disassembler, memory viewer, I/O
ports viewer, tile viewer, map viewer, palette viewer and sprite viewer. They
are different in GBx and GBA mode. If you are playing a SGB game, there is also
a SGB things viewer. I have to make it easy to dump/save things, right now it
only lets you watch. So... here are some screens:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GBA mode&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="GiiBiiAdvance GBA screenshot" class="align-center" src="./images/giibiiadvance-v0-1-0-screen-gba.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gba-dis.png"&gt;GBA Disassembler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gba-mem.png"&gt;GBA Memory viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gba-io.png"&gt;GBA I/O viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gba-vram.png"&gt;GBA VRAM viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GBC mode&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="GiiBiiAdvance GBC screenshot" class="align-center" src="./images/giibiiadvance-v0-1-0-screen-gbc.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gbc-dis.png"&gt;GBC Disassembler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gbc-mem.png"&gt;GBC Memory viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gbc-io.png"&gt;GBC I/O viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-gbc-vram.png"&gt;GBC VRAM viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SGB mode&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="GiiBiiAdvance SGB screenshot" class="align-center" src="./images/giibiiadvance-v0-1-0-screen-sgb.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="./images/giibiiadvance-v0-1-0-sgb-view.png"&gt;SGB viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;strong&gt;downloads&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibiiadvance_010_bin.rar"&gt;Binary (windows only)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibiiadvance_010_src.rar"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So... that's it. I hope this program is useful for somebody. About the splash
screen... You can close it by clicking it, or just waiting 4 seconds. It is
disabled in the source code.&lt;/p&gt;
&lt;p&gt;Oh, the last thing. If you want real SGB emulation, try &lt;a class="reference external" href="http://byuu.org/bsnes/"&gt;bsnes&lt;/a&gt;. It's an impressive SNES emulator, and lets you load
and use a Game Boy ROM with Super Game Boy ROM.&lt;/p&gt;
&lt;p&gt;A few more screenshots in GBA mode:&lt;/p&gt;
&lt;p&gt;&lt;img alt="GBA screenshot 1" src="./images/giibiiadvance-v0-1-0-screen-1.png" /&gt; &lt;img alt="GBA screenshot 2" src="./images/giibiiadvance-v0-1-0-screen-2.png" /&gt; &lt;img alt="GBA screenshot 3" src="./images/giibiiadvance-v0-1-0-screen-3.png" /&gt; &lt;img alt="GBA screenshot 4" src="./images/giibiiadvance-v0-1-0-screen-4.png" /&gt; &lt;img alt="GBA screenshot 5" src="./images/giibiiadvance-v0-1-0-screen-5.png" /&gt; &lt;img alt="GBA screenshot 6" src="./images/giibiiadvance-v0-1-0-screen-6.png" /&gt; &lt;img alt="GBA screenshot 7" src="./images/giibiiadvance-v0-1-0-screen-7.png" /&gt; &lt;img alt="GBA screenshot 8" src="./images/giibiiadvance-v0-1-0-screen-8.png" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="gameboy-advance"></category><category term="giibii"></category><category term="giibiiadvance"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>GiiBii v0.3</title><link href="http://www.skylyrac.net/2010-08-27-giibii-v0-3.html" rel="alternate"></link><published>2010-08-27T16:55:00+01:00</published><updated>2018-02-01T23:01:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2010-08-27:/2010-08-27-giibii-v0-3.html</id><summary type="html">&lt;p&gt;Special &lt;a class="reference external" href="http://www.scenebeta.com/noticia/scenery-beta-2010-international-homebrew-showcase-rules"&gt;Scenery Beta 2010&lt;/a&gt;
version!&lt;/p&gt;
&lt;p&gt;The most important change is that it now uses OpenGL instead of drawing directly
to the framebuffer, which makes it work a bit faster. I've also allowed to use
3x zoom because the screen size is no longer a problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dissasembler fixes.&lt;/li&gt;
&lt;li&gt;Debugger screen …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Special &lt;a class="reference external" href="http://www.scenebeta.com/noticia/scenery-beta-2010-international-homebrew-showcase-rules"&gt;Scenery Beta 2010&lt;/a&gt;
version!&lt;/p&gt;
&lt;p&gt;The most important change is that it now uses OpenGL instead of drawing directly
to the framebuffer, which makes it work a bit faster. I've also allowed to use
3x zoom because the screen size is no longer a problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dissasembler fixes.&lt;/li&gt;
&lt;li&gt;Debugger screen now gets focus when reaching a breakpoint.&lt;/li&gt;
&lt;li&gt;Changed to OpenGL, allowed 3x zoom. Fullscreen mode is buggy, sometimes it
crashes when returning to windowed mode... :S&lt;/li&gt;
&lt;li&gt;Rumble &amp;quot;emulated&amp;quot; (screen shakes a bit).&lt;/li&gt;
&lt;li&gt;MBC7 fixed (Kirby Tilt 'n' Tumble).&lt;/li&gt;
&lt;li&gt;Mapper code optimized a bit.&lt;/li&gt;
&lt;li&gt;Stat bug emulated (Legend of Zerd, Road Rash now work in non-color Game Boy
modes).&lt;/li&gt;
&lt;li&gt;Game Boy Pocket screen is now white, you can only change the color of the
normal Game Boy screen.&lt;/li&gt;
&lt;li&gt;Sound emulation code partially optimized. Also, it is more accurate now (and
it can save the sound output to a wav file, but the code is disabled this
version because it needs testing).&lt;/li&gt;
&lt;li&gt;CPU fixes: Zero flag for opcodes &lt;tt class="docutils literal"&gt;RRA&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;RR A&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;RCLA&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;RCL A&lt;/tt&gt;,
etc...&lt;/li&gt;
&lt;li&gt;Added a filter to make colors more &amp;quot;realistic&amp;quot;. You can enable it in the menu,
and you can also enable or disable the frame mix filter that comes with GiiBii
since first version.&lt;/li&gt;
&lt;li&gt;Discovered why Alleyway didn't work: GB Printer was enabled.&lt;/li&gt;
&lt;li&gt;Fixed a bug in &lt;tt class="docutils literal"&gt;ICON_EN&lt;/tt&gt; SGB command that made graphics have serious
glitches in some games (DK2, DK3).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Downloads&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v03_bin_windows.rar"&gt;Binaries (win32)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v03_bin_linux.rar"&gt;Binaries (Linux)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You need SDL and GTK+ (and OpenCV for the GB Camera).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v03_src.rar"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Emulation may be more accurate if you put the GB boot roms in the &amp;quot;boot&amp;quot;
folder of the emulator (see the readme.txt). They aren't included with the
download.&lt;/li&gt;
&lt;li&gt;You can load a ROM by grabbing it to the GiiBii exe file (or using
the command line &amp;quot;GiiBii myrom.gb&amp;quot;).&lt;/li&gt;
&lt;li&gt;If you want free ROMs, go to &lt;a class="reference external" href="http://www.pdroms.de/files/gameboy/"&gt;PDRoms&lt;/a&gt;.
If you are looking for commercial games, I can't help you.&lt;/li&gt;
&lt;li&gt;This emulator will be mixed someday with GiiBiiAdvance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 1" src="./images/giibii-v0-3-screen-1.png" /&gt; &lt;img alt="Screenshot 2" src="./images/giibii-v0-3-screen-2.png" /&gt; &lt;img alt="Screenshot 3" src="./images/giibii-v0-3-screen-3.png" /&gt; &lt;img alt="Screenshot 4" src="./images/giibii-v0-3-screen-4.png" /&gt; &lt;img alt="Screenshot 5" src="./images/giibii-v0-3-screen-5.png" /&gt; &lt;img alt="Screenshot 6" src="./images/giibii-v0-3-screen-6.png" /&gt;&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="giibii"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>GiiBiiAdvance - WIP</title><link href="http://www.skylyrac.net/2010-08-25-giibiiadvance-wip.html" rel="alternate"></link><published>2010-08-25T13:06:00+01:00</published><updated>2018-02-01T22:59:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2010-08-25:/2010-08-25-giibiiadvance-wip.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;Since GiiBii works really well for what I expected, I wanted to do a GBA
emulator. I've been working on it since July, and after 2 months of work, here
are some results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kirby - Nightmare in Dream Land" src="./images/giibiiadvance-wip-screenshot-1.png" /&gt; &lt;img alt="Need For Speed - Underground 2" src="./images/giibiiadvance-wip-screenshot-2.png" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;quot;Kirby - Nightmare in Dream Land&amp;quot; and &amp;quot;Need For Speed - Underground 2&amp;quot;.&lt;/p&gt;
&lt;p&gt;Obviously, there is still a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;Since GiiBii works really well for what I expected, I wanted to do a GBA
emulator. I've been working on it since July, and after 2 months of work, here
are some results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kirby - Nightmare in Dream Land" src="./images/giibiiadvance-wip-screenshot-1.png" /&gt; &lt;img alt="Need For Speed - Underground 2" src="./images/giibiiadvance-wip-screenshot-2.png" /&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;quot;Kirby - Nightmare in Dream Land&amp;quot; and &amp;quot;Need For Speed - Underground 2&amp;quot;.&lt;/p&gt;
&lt;p&gt;Obviously, there is still a lot to do, most games are unplayable (in fact, NFS
runs very slowly, there is a problem with CPU timing, I guess), have graphic
glitches (where is the needle of the speedometer? :P) or just can't pass from
the initial splash screens (if they can show them...).&lt;/p&gt;
&lt;p&gt;What is done:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CPU emulation (ARM and THUMB), but it is still buggy.&lt;/li&gt;
&lt;li&gt;DMA channels (except special modes).&lt;/li&gt;
&lt;li&gt;All BG modes and regular (non-affine) sprites are emulated. No special effects
or window effects, though.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;VBL&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;HBL&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;VCOUNT&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DMA&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;KEYPAD&lt;/tt&gt; interrupt requests.&lt;/li&gt;
&lt;li&gt;Disassembler, I/O register viewer (both aren't finished) and memory viewer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A capture of the debugger:&lt;/p&gt;
&lt;img alt="GiiBiiAdvance Debugger" class="align-center" src="./images/giibiiadvance-wip-debugger.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Yeah, that's a Tonc demo.&lt;/p&gt;
&lt;p&gt;PS: A new version of GiiBii is coming in a few days :P.&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="gameboy-advance"></category><category term="giibii"></category><category term="giibiiadvance"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>GiiBii v0.2</title><link href="http://www.skylyrac.net/2010-02-02-giibii-v0-2.html" rel="alternate"></link><published>2010-02-02T23:06:00+00:00</published><updated>2018-02-01T22:52:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2010-02-02:/2010-02-02-giibii-v0-2.html</id><summary type="html">&lt;p&gt;New version! This time, GiiBii comes with an interesting new feature... It can
emulate the GB Camera with camera features! I'll explain more about this later,
before that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New mappers supported: MMM01 (Taito Variety Pack works, Momotarou Collection 2
doesn't...), MBC7 (controls need some improvements...).&lt;/li&gt;
&lt;li&gt;You can set the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;New version! This time, GiiBii comes with an interesting new feature... It can
emulate the GB Camera with camera features! I'll explain more about this later,
before that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New mappers supported: MMM01 (Taito Variety Pack works, Momotarou Collection 2
doesn't...), MBC7 (controls need some improvements...).&lt;/li&gt;
&lt;li&gt;You can set the screen size to 1x or 2x now.&lt;/li&gt;
&lt;li&gt;You can reset the ROM instead of having to exit it and reload the ROM.&lt;/li&gt;
&lt;li&gt;Now the console shows more information when loading a ROM (like the licensee
name).&lt;/li&gt;
&lt;li&gt;You can set customized controls for 4 players (yeah, SGB multiplayer works
again ^^).&lt;/li&gt;
&lt;li&gt;You can change volume or enable/disable each sound channel.&lt;/li&gt;
&lt;li&gt;Stop mode emulated correctly (but I've never seen any game using it, I've
coded it just by testing on my GBC).&lt;/li&gt;
&lt;li&gt;Added breakpoint support.&lt;/li&gt;
&lt;li&gt;Debugger font size can be changed (take a look at the ini file).&lt;/li&gt;
&lt;li&gt;A few little bugfixes and improvements...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Downloads&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v02_bin.rar"&gt;Binaries (win32)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Binaries (Linux) -- coming soon... :)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v02_src.rar"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very messy, camera functions in &amp;quot;memory.c&amp;quot; (nothing special, though).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Game Boy Camera&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;This version of GiiBii can emulate camera features of GB Camera just by using a
webcam. For getting the pictures from it, GiiBii uses OpenCV, which is
cross-platform, just like SDL and GTK+. GiiBii will try to use as much
information as possible from the webcam, and scale it down to the GB size. This
is just the first version with camera support, you can expect some improvements
in next versions. For example, brightness is emulated very badly... but hey, it
&amp;quot;works&amp;quot;. On the other hand, contrast doesn't work... What I'm trying to say is
that you will have to wait if you want a better support. Just remember that this
emulator isn't as fast as it could be, so don't expect it running as well as the
other emulators you've tried. Anyway, take a look at what it can do now :) :&lt;/p&gt;
&lt;img alt="Screenshots Game Boy Camera on GiiBii v0.2" class="align-center" src="./images/giibii-v0-2-printer.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Try taking a picture and &amp;quot;printing&amp;quot; it using GB Printer (which is emulated). :)&lt;/p&gt;
&lt;p&gt;Just a note: It may freeze a second or so when loading the GB Camera ROM
(because of the webcam being initialized). If you want to enable the webcam
window, enable debug messages and it will load when opening the GB Camera ROM.&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="giibii"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>GB Camera emulated with a webcam!!</title><link href="http://www.skylyrac.net/2010-02-02-gb-camera-emulated-webcam.html" rel="alternate"></link><published>2010-02-02T15:29:00+00:00</published><updated>2018-02-01T23:18:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2010-02-02:/2010-02-02-gb-camera-emulated-webcam.html</id><content type="html">&lt;img alt="Screenshots of the Game Boy Camera" class="align-center" src="./images/gb-camera-emulated-webcam.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Uhmmm... yeah... ^_^&lt;/p&gt;
&lt;p&gt;PS: I'm using OpenCV for getting the webcam data.&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="giibii"></category><category term="emulation"></category><category term="programming"></category><category term="hacking"></category></entry><entry><title>GBT Player v1.1</title><link href="http://www.skylyrac.net/2009-10-24-gbt-player-v1-1.html" rel="alternate"></link><published>2009-10-24T16:06:00+01:00</published><updated>2018-02-01T22:49:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-10-24:/2009-10-24-gbt-player-v1-1.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm going to show you a music player... for Game Boy. :P It's very
easy to use, and easy to compose music for it. I've included source code (100%
asm) and templates for
&lt;a class="reference external" href="https://github.com/JustinLloyd/RGBDS-Gameboy-Development-System"&gt;RGBDS&lt;/a&gt; and
&lt;a class="reference external" href="http://gbdk.sourceforge.net/"&gt;GBDK&lt;/a&gt;. You have to compose the music in a
tracker in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm going to show you a music player... for Game Boy. :P It's very
easy to use, and easy to compose music for it. I've included source code (100%
asm) and templates for
&lt;a class="reference external" href="https://github.com/JustinLloyd/RGBDS-Gameboy-Development-System"&gt;RGBDS&lt;/a&gt; and
&lt;a class="reference external" href="http://gbdk.sourceforge.net/"&gt;GBDK&lt;/a&gt;. You have to compose the music in a
tracker in the PC using a custom mod file included in the download. Available
effects and other instructions to modify it are in a text file in the download.
Then, you convert it using a special tool which will export the data to a GBDK c
file or a RGBDS asm file. Included templates can be compiled by double clicking
the bat files, so you can use them for testing your songs as you compose them
(I'd use the RGBDS one). For any other information, look at the readme, or ask
me. There is an example there, the rest should be self-explanatory.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/gbt_player_v1_0.rar"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: Is there anybody who still codes for GB? :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some wrong definitions changed:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/gbt_player_v1_1.7z"&gt;Download version 1.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Updated some links to point at the correct locations of the tools as of
2018-01-29.&lt;/p&gt;
</content><category term="gameboy"></category><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Pascal Pong v0.1</title><link href="http://www.skylyrac.net/2009-10-24-pascal-pong-v0-1.html" rel="alternate"></link><published>2009-10-24T01:31:00+01:00</published><updated>2009-10-24T01:31:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-10-24:/2009-10-24-pascal-pong-v0-1.html</id><summary type="html">&lt;p&gt;Well... This is what happens when I'm bored and I feel a bit guilty because I
haven't practised anything with pascal (they make us code with Turbo Pascal in
university)... I don't know exactly why I've put v0.1 as there won't probably be
more updates... :P Anyway, download links …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well... This is what happens when I'm bored and I feel a bit guilty because I
haven't practised anything with pascal (they make us code with Turbo Pascal in
university)... I don't know exactly why I've put v0.1 as there won't probably be
more updates... :P Anyway, download links here, source + win32 binary:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/pascal_pong.rar"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And a screenshot...&lt;/p&gt;
&lt;img alt="Screenshot of Pascal Pong" class="align-center" src="./images/pascal-pong.png" /&gt;
</content><category term="programming"></category><category term="pascal"></category><category term="programming"></category></entry><entry><title>GiiBii v0.1</title><link href="http://www.skylyrac.net/2009-10-02-giibii-v0-1.html" rel="alternate"></link><published>2009-10-02T12:53:00+01:00</published><updated>2018-02-01T22:47:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-10-02:/2009-10-02-giibii-v0-1.html</id><summary type="html">&lt;p&gt;Well, it took me some days more to finish this because of some (sound related)
bugs I couldn't fix, but here it is! GiiBii v0.1, first version of GiiBii for
PC. I hope you like it. I think this is the first &amp;quot;official&amp;quot; release of an
emulator that supports …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, it took me some days more to finish this because of some (sound related)
bugs I couldn't fix, but here it is! GiiBii v0.1, first version of GiiBii for
PC. I hope you like it. I think this is the first &amp;quot;official&amp;quot; release of an
emulator that supports the GBC boot ROM (not included in the downloads). :)&lt;/p&gt;
&lt;img alt="Screenshots of GiiBii v0.1" class="align-center" src="./images/giibii-v0-1-2.jpg" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Supports MBC1, MBC2, MBC3 (RTC emulated), MBC5, HuC-1.&lt;/li&gt;
&lt;li&gt;Sound channels emulated correctly (you can hear &amp;quot;Pikachu!&amp;quot; in Pokemon Yellow,
for example).&lt;/li&gt;
&lt;li&gt;&amp;quot;Turbo&amp;quot; mode. Not extremely fast, though... This emulator is not meant to be
fast, but to be accurate.&lt;/li&gt;
&lt;li&gt;Supports boot ROMs (bios). At the moment of writing this only DMG, SGB and CGB
have been dumped, but GiiBii is prepared for the other ones as well (they may
not work, as they haven't been tested).&lt;/li&gt;
&lt;li&gt;It can generate screenshots in PNG format.&lt;/li&gt;
&lt;li&gt;GB Printer emulated, images are saved into the screenshots folder in PNG
format, too.&lt;/li&gt;
&lt;li&gt;Allows changing the screen palette in GB mode.&lt;/li&gt;
&lt;li&gt;Super Game Boy is emulated, though some commands aren't coded (sound, default
palettes...).&lt;/li&gt;
&lt;li&gt;Debugger and VRAM viewer (debugger is not complete yet).&lt;/li&gt;
&lt;li&gt;Uses SDL and GTK+, cross platform libraries, so it should be very easy to
port to Linux, for example (I'll check it and upload a binary when done).&lt;/li&gt;
&lt;li&gt;GiiBii is open source, it is licensed under the GPL v3 so you can modify it
but you have to make modifications open source too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, the &lt;strong&gt;downloads&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v01_bin.rar"&gt;Binaries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/giibii_pc_v01_src.rar"&gt;Source&lt;/a&gt;&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="giibii"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>GiiBii... now on PC!</title><link href="http://www.skylyrac.net/2009-09-19-giibii-now-on-pc.html" rel="alternate"></link><published>2009-09-19T10:42:00+01:00</published><updated>2018-02-01T22:45:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-09-19:/2009-09-19-giibii-now-on-pc.html</id><summary type="html">&lt;p&gt;Well, this is the first &amp;quot;real&amp;quot; post. :P&lt;/p&gt;
&lt;p&gt;I've been working on a port of GiiBii (my Game Boy emulator) to PC for about 3
weeks. It has been a bit difficult, as I used libraries that are only available
in Wii (libogc, asndlib...), and I wanted to make the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, this is the first &amp;quot;real&amp;quot; post. :P&lt;/p&gt;
&lt;p&gt;I've been working on a port of GiiBii (my Game Boy emulator) to PC for about 3
weeks. It has been a bit difficult, as I used libraries that are only available
in Wii (libogc, asndlib...), and I wanted to make the port using only
cross-platform libraries (as I want to make Linux binaries).&lt;/p&gt;
&lt;p&gt;The first thing I have to decide was the graphics library I could use in PC. I
decided that SDL was a good idea because it also gives a low-level sound API,
just what I need to improve the audio system of my emulator (yeah, the Wii
version uses a really bad system and there are glitches many times). When I
managed to get it to compile, I started porting the emulator. I deleted a lot of
code and, after commenting a lot of parts like sound, input, Super Game Boy
emulation, I managed to get it to compile. Then I started to fix that parts.
When I finished with the input and the SGB ones, I decided it was time to begin
with the GUI.&lt;/p&gt;
&lt;p&gt;I looked for a library to make it. I found out that GTK+ was a good one, and I
started to put together GTK+ and SDL. When it was ready, I started to code the
GUI. GTK+ is a bit difficult at the beginning, but when you get used to it, you
can see that it's really useful. After a lot of hours of work, I finally made a
little menu with almost all options that you can see in the Wii binary and
rewrote the debugger.&lt;/p&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;img alt="Screenshots of GiiBii v0.1" class="align-center" src="./images/giibii-v0-1.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Cool, isn't it? :)&lt;/p&gt;
&lt;p&gt;I'm rewriting the sound emulation part at the moment. I think that in a week or
so I will have finished it (and some parts of the menu) and I will release a
beta.&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content><category term="emulation"></category><category term="gameboy"></category><category term="giibii"></category><category term="emulation"></category><category term="programming"></category></entry><entry><title>Welcome!</title><link href="http://www.skylyrac.net/2009-09-19-welcome.html" rel="alternate"></link><published>2009-09-19T01:15:00+01:00</published><updated>2018-02-01T23:06:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-09-19:/2009-09-19-welcome.html</id><summary type="html">&lt;p&gt;Hello everybody!&lt;/p&gt;
&lt;p&gt;This is my new blog. I think it's time to create one, so that I can say when
update one of my projects, or just I've done something I consider interesting to
say. :) I'm not quite good at writing, and my English isn't great, either, so
you can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello everybody!&lt;/p&gt;
&lt;p&gt;This is my new blog. I think it's time to create one, so that I can say when
update one of my projects, or just I've done something I consider interesting to
say. :) I'm not quite good at writing, and my English isn't great, either, so
you can expect a lot of mistakes in my writing. Just let me know where I made
any mistake and I'll correct it.&lt;/p&gt;
&lt;p&gt;By the way, this is &lt;a class="reference external" href="www.skylyrac.net/old-site/index.html"&gt;my other webpage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Dovoto for the hosting of both this blog and the other webpage! :D&lt;/p&gt;
&lt;p&gt;Now, time to go back to coding...&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content><category term="blog"></category><category term="blog"></category></entry></feed>